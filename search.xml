<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue的v-data-table实现</title>
    <url>/2020/05/01/Vue%E7%9A%84v-data-table%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><p>分为单个插槽、具名插槽、作用域插槽。</p>
<p>作用域插槽与前面两种插槽相比，作用域插槽是要在slot上面绑定数据的。所以我们也可以称作用域插槽为带数据插槽。</p>
<a id="more"></a>

<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"items"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-xs-center"</span>&gt;</span></span><span class="xquery">&#123;&#123; props.<span class="type">item</span><span class="built_in">.id</span> &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-xs-center"</span>&gt;</span></span><span class="xquery">&#123;&#123; props.<span class="type">item</span><span class="built_in">.name</span> &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-xs-center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          </span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"props.item.image"</span> <span class="attr">:src</span>=<span class="string">"props.item.image"</span> <span class="attr">width</span>=<span class="string">"130"</span> <span class="attr">height</span>=<span class="string">"40"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>无<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-xs-center"</span>&gt;</span></span><span class="xquery">&#123;&#123; props.<span class="type">item</span>.letter &#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"justify-center layout px-0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          </span><span class="xml"><span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> @<span class="attr">click</span>=<span class="string">"editBrand(props.item)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-edit"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span></span><br><span class="line"><span class="xml">          </span><span class="xml"><span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> @<span class="attr">click</span>=<span class="string">"deleteBrand(props.item)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-delete"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="v-data-table"><a href="#v-data-table" class="headerlink" title="v-data-table"></a>v-data-table</h2><p>v-data-table 用于显示表格数据，功能包括排序、搜索、分页、行内编辑、头部提示以及行选择。</p>
<h3 id="核心属性"><a href="#核心属性" class="headerlink" title="核心属性"></a>核心属性</h3><ul>
<li>headers：定义表头的数组，数组的每个元素就是一个表头信息对象</li>
<li>items：表格的数据的数组，数组的每个元素是一行数据的对象，对象的key要与表头的value一致。</li>
<li>loading：是否显示加载数据的进度条，默认是false；</li>
<li>total-items：分页的总条数信息，number类型，无默认值；</li>
<li>pagination.sync：包含分页和排序信息的对象，将其与vue实例中的属性关联，表格的分页或排序按钮被触发时，会自动将最新的分页和排序信息更新。对象结构</li>
<li>select-all ：是否显示每一行的复选框，Boolean类型，无默认值；</li>
<li>no-data-text：当没有查询到数据时显示的提示信息，string类型，无默认值；</li>
<li>dark：是否使用黑暗色彩主题，默认是false；</li>
<li>expand：表格的行是否可以展开，默认是false。</li>
<li>search：搜索过滤字段</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">v-data-table</span></span></span></span><br><span class="line"><span class="xml">      :headers="headers"</span></span><br><span class="line"><span class="xml">      :items="brands"</span></span><br><span class="line"><span class="xml">      :pagination.sync="pagination"</span></span><br><span class="line"><span class="xml">      :total-items="totalBrands"</span></span><br><span class="line"><span class="xml">      :loading="loading"</span></span><br><span class="line"><span class="xml">      class="elevation-1"</span></span><br><span class="line"><span class="xml">    &gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"items"</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-xs-center"</span>&gt;</span></span><span class="template-variable">&#123;&#123; props.item.id &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-xs-center"</span>&gt;</span></span><span class="template-variable">&#123;&#123; props.item.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-xs-center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">"props.item.image"</span> <span class="attr">:src</span>=<span class="string">"props.item.image"</span> <span class="attr">width</span>=<span class="string">"130"</span> <span class="attr">height</span>=<span class="string">"40"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>无<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-xs-center"</span>&gt;</span></span><span class="template-variable">&#123;&#123; props.item.letter &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"justify-center layout px-0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> @<span class="attr">click</span>=<span class="string">"editBrand(props.item)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-edit"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">v-btn</span> <span class="attr">icon</span> @<span class="attr">click</span>=<span class="string">"deleteBrand(props.item)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-delete"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">v-btn</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">v-data-table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础语法</title>
    <url>/2020/05/01/Vue%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>MVVM中的VM要做的事情就是把DOM操作完全封装起来，开发人员不用再关心Model和View之间是如何互相影响的：</p>
<ul>
<li>只要我们Model发生了改变，View上自然就会表现出来。</li>
<li>当用户修改了View，Model中的数据也会跟着改变。</li>
</ul>
<p>把开发人员从繁琐的DOM操作中解放出来，把关注点放在如何操作Model上。</p>
<a id="more"></a>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>前端三巨头之一：Vue.js、React.js、AngularJS。</p>
<p>Vue：用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/vue/dist/vue.js"</span> &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 创建vue实例</span></span><br><span class="line"><span class="xml">    var app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">        el:"#app", // el即element，该vue实例要渲染的页面元素</span></span><br><span class="line"><span class="xml">        data:&#123; // 渲染页面需要的数据</span></span><br><span class="line"><span class="xml">            name: "00"</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="双向渲染"><a href="#双向渲染" class="headerlink" title="双向渲染"></a>双向渲染</h3><p>v-model</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"name"</span>/&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><p>beforeCreated：我们在用Vue时都要进行实例化，因此，该函数就是在Vue实例化时调用，也可以将他理解为初始化函数比较方便一点，在Vue1.0时，这个函数的名字就是init。 </p>
<p>created：在创建实例之后进行调用。 </p>
<p>beforeMount：页面加载完成，没有渲染。如：此时页面还是</p>
<p>mounted：我们可以将他理解为原生js中的window.onload=function({.,.}),或许大家也在用jquery，所以也可以理解为jquery中的$(document).ready(function(){….})，他的功能就是：在dom文档渲染完毕之后将要执行的函数，该函数在Vue1.0版本中名字为compiled。 此时页面中的已被渲染成峰哥</p>
<p>beforeDestroy：该函数将在销毁实例前进行调用 。</p>
<p>destroyed：改函数将在销毁实例时进行调用。</p>
<p>beforeUpdate：组件更新之前。</p>
<p>updated：组件更新之后。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建vue实例</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>, <span class="comment">// el即element，该vue实例要渲染的页面元素</span></span><br><span class="line">    data: &#123; <span class="comment">// 渲染页面需要的数据</span></span><br><span class="line">        name: <span class="string">"00"</span>,</span><br><span class="line">        num: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.num--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="v-text和v-html"><a href="#v-text和v-html" class="headerlink" title="v-text和v-html"></a>v-text和v-html</h4><ul>
<li>v-text：将数据输出到元素内部，如果输出的数据有HTML代码，会作为普通文本输出</li>
<li>v-html：将数据输出到元素内部，如果输出的数据有HTML代码，会被渲染</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    v-text:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    v-html:<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>为避免注入，推荐v-text。</p>
<h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><p>v-on指令用于给页面元素绑定事件。事件绑定可以简写，例如<code>v-on:click=&#39;add&#39;</code>可以简写为<code>@click=&#39;add&#39;</code>。</p>
<h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong>。修饰符是由点开头的指令后缀来表示的。</p>
<ul>
<li><code>.stop</code> ：阻止事件冒泡到父元素</li>
<li><code>.prevent</code>：阻止默认事件发生*</li>
<li><code>.capture</code>：使用事件捕获模式</li>
<li><code>.self</code>：只有元素自身触发事件才执行。（冒泡或捕获的都不执行）</li>
<li><code>.once</code>：只执行一次</li>
</ul>
<p>阻止默认事件</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--右击事件，并阻止默认事件发生--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:contextmenu.prevent</span>=<span class="string">"num++"</span>&gt;</span>增加一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--右击事件，不阻止默认事件发生--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:contextmenu</span>=<span class="string">"decrement($event)"</span>&gt;</span>减少一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>有</span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml">个女神迷恋峰哥<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>遍历数组<br>方式1</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">v-for</span>=<span class="string">"item in items"</span></span><br></pre></td></tr></table></figure>
<p>方式2</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(user, index) in users"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-variable">&#123;&#123;index + 1&#125;&#125;</span><span class="xml">. </span><span class="template-variable">&#123;&#123;user.name&#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123;user.gender&#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123;user.age&#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>遍历对象</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">v-for</span>=<span class="string">"value in object"</span></span><br><span class="line"><span class="attr">v-for</span>=<span class="string">"(value,key) in object"</span></span><br><span class="line"><span class="attr">v-for</span>=<span class="string">"(value,key,index) in object"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>1个参数时，得到的是对象的属性值</li>
<li>2个参数时，第一个是属性值，第二个是属性名</li>
<li>3个参数时，第三个是索引，从0开始</li>
</ul>
<h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>watch可以让我们监控一个值的变化。从而做出相应的反应。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            message(newVal, oldVal)&#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(newVal, oldVal);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">      pagination: &#123; <span class="comment">// 监视pagination属性的变化</span></span><br><span class="line">        deep: <span class="keyword">true</span>, // deep为<span class="keyword">true</span>，会监视pagination的属性及属性中的对象属性变化</span><br><span class="line">        <span class="keyword">handler</span>() &#123;</span><br><span class="line">          <span class="comment">// 变化后的回调函数，这里我们再次调用getDataFromServer即可</span></span><br><span class="line">          <span class="keyword">this</span>.getDataFromServer();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      search: &#123; <span class="comment">// 监视搜索字段</span></span><br><span class="line">        <span class="keyword">handler</span>() &#123;</span><br><span class="line">          <span class="keyword">this</span>.getDataFromServer();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><h4 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--使用定义好的全局组件--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./node_modules/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    // 定义全局组件，两个参数：1，组件名称。2，组件参数</span></span><br><span class="line"><span class="xml">    Vue.component("counter",</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">        template:'&lt;button v-on:click="count++"&gt;你点了我 &#123;&#123; count &#125;</span><span class="xml">&#125; 次，我记住了.<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line"><span class="xml">        data()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">            return &#123;</span></span><br><span class="line"><span class="template-variable">                count:0</span></span><br><span class="line"><span class="template-variable">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;)</span></span><br><span class="line"><span class="xml">    var app = new Vue(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">        el:"#app"</span></span><br><span class="line"><span class="template-variable">    &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h4><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = &#123;</span><br><span class="line">    template:'&lt;button v-<span class="keyword">on</span>:click=<span class="string">"count++"</span>&gt;你点了我 &#123;&#123; <span class="keyword">count</span> &#125;&#125; 次，我记住了.&lt;/button&gt;',</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="keyword">count</span>:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">app</span> = new Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        counter:counter <span class="comment">// 将定义的对象注册为组件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="组件通信-父到子"><a href="#组件通信-父到子" class="headerlink" title="组件通信-父到子"></a>组件通信-父到子</h4><ol>
<li>父组件使用子组件时，自定义属性（属性名任意，属性值为要传递的数据）</li>
<li>子组件通过props接收父组件数据，通过自定义属性的属性名</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>传智播客已开设如下课程：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用子组件的同时，传递属性，这里使用了v-bind，指向了父组件自己的属性lessons --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-list</span> <span class="attr">:items</span>=<span class="string">"lessons"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attribute">el</span>:<span class="string">"#app"</span>,</span><br><span class="line">    <span class="attribute">components</span>:&#123;</span><br><span class="line">        myList <span class="comment">// 当key和value一样时，可以只写一个</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attribute">data</span>:&#123;</span><br><span class="line">        <span class="attribute">lessons</span>:[</span><br><span class="line">            &#123;<span class="attribute">id:</span><span class="string">1, name</span>: <span class="string">'java'</span>&#125;,</span><br><span class="line">            &#123;<span class="attribute">id:</span><span class="string">2, name</span>: <span class="string">'php'</span>&#125;,</span><br><span class="line">            &#123;<span class="attribute">id:</span><span class="string">3, name</span>: <span class="string">'ios'</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="组件通信-子到父"><a href="#组件通信-子到父" class="headerlink" title="组件通信-子到父"></a>组件通信-子到父</h4><p>通过v-on指令将父组件的函数绑定到子组件</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>num: </span><span class="template-variable">&#123;&#123;num&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">counter</span> <span class="attr">:count</span>=<span class="string">"num"</span> @<span class="attr">inc</span>=<span class="string">"increment"</span> @<span class="attr">dec</span>=<span class="string">"decrement"</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>在子组件中定义函数，函数的具体实现调用父组件的实现，并在子组件中调用这些函数。当子组件中按钮被点击时，调用绑定的函数</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Vue</span>.component(<span class="string">"counter"</span>, &#123;</span><br><span class="line">    template:'\</span><br><span class="line">        &lt;div&gt;\</span><br><span class="line">            &lt;button <span class="meta">@click</span>=<span class="string">"plus"</span>&gt;加&lt;/button&gt;  \</span><br><span class="line">            &lt;button <span class="meta">@click</span>=<span class="string">"reduce"</span>&gt;减&lt;/button&gt;  \</span><br><span class="line">        &lt;/div&gt;',</span><br><span class="line">    props:[<span class="symbol">'coun</span>t'],</span><br><span class="line">    methods:&#123;</span><br><span class="line">        plus()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"inc"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        reduce()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"dec"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="路由vue-router"><a href="#路由vue-router" class="headerlink" title="路由vue-router"></a>路由vue-router</h3><p>新建vue-router对象，并且指定路由规则</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建VueRouter对象</span></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line"><span class="symbol">    routes:</span>[ <span class="comment">// 编写路由规则</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="symbol">            path:</span><span class="string">"/login"</span>, <span class="comment">// 请求路径，以“/”开头</span></span><br><span class="line"><span class="symbol">            component:</span>loginForm <span class="comment">// 组件名称</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="symbol">            path:</span><span class="string">"/register"</span>,</span><br><span class="line"><span class="symbol">            component:</span>registerForm</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建VueRouter对象，并指定路由参数</li>
<li>routes：路由规则的数组，可以指定多个对象，每个对象是一条路由规则，包含以下属性：<ul>
<li>path：路由的路径</li>
<li>component：组件名称</li>
</ul>
</li>
</ul>
<p>在父组件中引入router对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    components:&#123;<span class="comment">// 引用登录和注册组件</span></span><br><span class="line">        loginForm,</span><br><span class="line">        registerForm</span><br><span class="line">    &#125;,</span><br><span class="line">    router <span class="comment">// 引用上面定义的router对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>页面跳转控制：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--router-link来指定跳转的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/register"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--vue-router的锚点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过<code>&lt;router-view&gt;</code>来指定一个锚点，当路由的路径匹配时，vue-router会自动把对应组件放到锚点位置进行渲染</li>
<li>通过<code>&lt;router-link&gt;</code>指定一个跳转链接，当点击时，会触发vue-router的路由功能，路径中的hash值会随之改变</li>
</ul>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>本地项目关联git远程仓库</title>
    <url>/2020/04/30/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%85%B3%E8%81%94git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="克隆-拷贝"><a href="#克隆-拷贝" class="headerlink" title="克隆+拷贝"></a>克隆+拷贝</h2><p>简单暴力方法，即远程仓库拉到本地，然后再把自己本地的项目拷贝到仓库中去。然后push到远程仓库上去即可。</p>
<h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h2><p>第二种方法就是先将本地的项目初始化为一个git仓库，然后再强行合并本地仓库和远程仓库。</p>
<a id="more"></a>

<p>1、新建git仓库，将本地项目设置为一个git仓库。如果本地项目已经是一个git仓库了，请跳过这一步。在项目根目录下：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure>
<p>2、把当前目录下的已有文件全部加到刚刚新建的git仓库中：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> .</span></span><br></pre></td></tr></table></figure>
<p>3、保存刚刚加入的文件，并书写保存信息：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">"push current files"</span></span><br></pre></td></tr></table></figure>
<p>4、将本地仓库与远程仓库关联起来：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:buaajz/test.git</span></span><br></pre></td></tr></table></figure>
<p>5、pull远程仓库的内容，更新本地仓库，使用–allow-unrelated-histories忽略本地仓库和远程仓库的无关性，强行合并（关键）：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git pull origin <span class="keyword">master</span> <span class="title">--allow-unrelated-histories</span></span><br></pre></td></tr></table></figure>
<p>6、把本地仓库的内容push到远程仓库：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>代码管理</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>基于zuul网关的cors解决跨域问题</title>
    <url>/2020/04/29/%E5%9F%BA%E4%BA%8Ezuul%E7%BD%91%E5%85%B3%E7%9A%84cors%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>跨域：浏览器对于javascript的同源策略的限制 。</p>
<p>以下情况都属于跨域：</p>
<table>
<thead>
<tr>
<th>跨域原因说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>域名不同</td>
<td><code>www.jd.com</code> 与 <code>www.taobao.com</code></td>
</tr>
<tr>
<td>域名相同，端口不同</td>
<td><code>www.jd.com:8080</code> 与 <code>www.jd.com:8081</code></td>
</tr>
<tr>
<td>二级域名不同</td>
<td><code>item.jd.com</code> 与 <code>miaosha.jd.com</code></td>
</tr>
</tbody></table>
<a id="more"></a>

<p>如果<strong>域名和端口都相同，但是请求路径不同</strong>，不属于跨域</p>
<p><strong>跨域问题 是针对ajax的一种限制</strong>。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>Jsonp：最早的解决方案，利用script标签可以跨域的原理实现。需要服务的支持，只能发起GET请求</li>
<li>nginx反向代理：利用nginx把跨域反向代理为不跨域，支持各种请求方式。需要在nginx进行额外配置，语义不清晰。</li>
<li>CORS：规范化的跨域请求解决方案，安全可靠。在服务端进行控制是否允许跨域，可自定义规则，支持各种请求方式。</li>
</ul>
<h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。</p>
<ul>
<li>浏览器端都有浏览器自动完成，我们无需操心。</li>
<li>服务端可以通过拦截器统一实现，不必每次都去进行跨域判定的编写。</li>
</ul>
<p>SpringMVC已经帮我们写好了CORS的跨域过滤器：CorsFilter 。</p>
<p>下面是在zuul网关中编写一个配置类，并且注册CorsFilter，实现跨域。</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class LeyouCorsConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public CorsFilter corsFilter() &#123;</span><br><span class="line">        //<span class="number">1</span>.添加CORS配置信息</span><br><span class="line">        CorsConfiguration config = new CorsConfiguration();</span><br><span class="line">        //<span class="number">1</span>) 允许的域,不要写*，否则cookie就无法使用了</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://manage.888.com"</span>);</span><br><span class="line">        //<span class="number">2</span>) 是否发送Cookie信息</span><br><span class="line">        config.setAllowCredentials(true);</span><br><span class="line">        //<span class="number">3</span>) 允许的请求方式</span><br><span class="line">        config.addAllowedMethod(<span class="string">"<span class="keyword">OPTIONS</span>"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"<span class="keyword">HEAD</span>"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"<span class="keyword">GET</span>"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"<span class="keyword">PUT</span>"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"<span class="keyword">POST</span>"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"<span class="keyword">DELETE</span>"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"<span class="keyword">PATCH</span>"</span>);</span><br><span class="line">        // <span class="number">4</span>）允许的头信息</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line"></span><br><span class="line">        //<span class="number">2</span>.添加映射路径，我们拦截一切请求</span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = new UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line"></span><br><span class="line">        //<span class="number">3</span>.返回新的CorsFilter.</span><br><span class="line">        return new CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程框架</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>SpringCloud</tag>
        <tag>SpringBoot</tag>
        <tag>跨域</tag>
        <tag>cors</tag>
      </tags>
  </entry>
  <entry>
    <title>nignx实现反向代理</title>
    <url>/2020/04/29/nignx%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>首先配置域名与ip的映射关系，可以选择本地host配置方式。或者选择<strong>购买云服务器和域名</strong>后，进行域名解析。</p>
<p>下面就云服务器的域名解析做简要说明。</p>
<p>云服务器的购买推荐阿里云eos。域名购买也可以在阿里云上简单操作。想要映射我们服务器的ip与域名，我们需要做两件事情：服务器设置安全组，以及域名解析。</p>
<a id="more"></a>

<p>服务器设置安全组，主要是配置端口号和访问ip。默认配置所有ip都可访问。</p>
<p>配置域名解析操作也较为简单，以阿里云为例，进入控制台后，可以看到该阿里云账号下面的域名，然后点击需要解析的域名的右侧，有一个“解析”按钮，单击进入。在域名解析界面，点击“添加记录”按钮。</p>
<p>添加记录的具体参数主要注意几点：</p>
<ul>
<li>解析内容的记录类型只有两种，如果是云服务器或者VPS就选择A，虚拟主机就选择CNAME。</li>
<li>主机记录。简单来说就是域名的前缀。推荐www或@。</li>
<li>解析线路。选择系统默认即可。</li>
<li>记录值。指的是服务器/虚拟主机的外网IP地址。</li>
<li>TTL。一般以系统默认的情况就行，默认的10分钟就行。</li>
</ul>
<p>在设置完域名解析后，我们运行ping命令，解析到ip地址即成功。</p>
<h3 id="Nignx安装及常用命令"><a href="#Nignx安装及常用命令" class="headerlink" title="Nignx安装及常用命令"></a>Nignx安装及常用命令</h3><p>Mac上可以通过Homebrew安装nignx。</p>
<p>安装</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">brew </span><span class="keyword">install </span>nginx</span><br></pre></td></tr></table></figure>
<p>启动</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo nginx</span></span><br></pre></td></tr></table></figure>
<p>关闭nginx</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sudo nginx -s <span class="built_in">stop</span></span><br></pre></td></tr></table></figure>
<p>重新加载nginx，在修改完配置后需要重新加载配置。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo nginx -s reload</span></span><br></pre></td></tr></table></figure>



<h3 id="Nignx实现反向代理"><a href="#Nignx实现反向代理" class="headerlink" title="Nignx实现反向代理"></a>Nignx实现反向代理</h3><p>配置好域名解析后，我们可以利用Nignx的反向代理特性，作为网关，管理我们的端口。实现不同请求交给不同服务器，转发请求实现路由功能。</p>
<ul>
<li>代理：通过客户机的配置，实现让一台服务器代理客户机，客户的所有请求都交给代理服务器处理。</li>
<li>反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。</li>
</ul>
<h3 id="nignx配置文件"><a href="#nignx配置文件" class="headerlink" title="nignx配置文件"></a>nignx配置文件</h3><p>nignx配置文件默认在/usr/local/etc/nginx的nignx.conf。</p>
<p>下面代表一个nignx配置。监听80端口，判断server_name后转发至不同的服务器端口。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  manage.<span class="number">888</span>.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="attribute">proxy_pass</span> http://127.0.0.1:9001;</span><br><span class="line">			<span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">			<span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>至此就可以实现基于nginx通过域名对服务器的访问了。</p>
<h3 id="root服务器本地路径配置"><a href="#root服务器本地路径配置" class="headerlink" title="root服务器本地路径配置"></a>root服务器本地路径配置</h3><p>配置本地路径，修改location中proxy_pass为root,属性值配置为绝对路径即可.</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  manage.<span class="number">888</span>.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="comment">#proxy_pass http://127.0.0.1:9001;</span></span><br><span class="line">			<span class="attribute">root</span> /Users/jinze/IdeaProjects/leyouimages/; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="rewrite路径的重写"><a href="#rewrite路径的重写" class="headerlink" title="rewrite路径的重写"></a>rewrite路径的重写</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  api.leyou.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上传路径的映射</span></span><br><span class="line">    <span class="attribute">location</span> /api/upload &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8082;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">600</span>;</span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">rewrite</span> <span class="string">"^/api/(.*)$"</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="comment">#rewrite "^/api/(.*)$" /api/upload/$1 break;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>&quot;^/api/(.*)$&quot;</code>：匹配路径的正则表达式，用了分组语法，把<code>/api/</code>以后的所有部分当做1组</p>
</li>
<li><p><code>/$1</code>：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始），即<code>/api/</code>后面的所有。这样新的路径就是除去<code>/api/</code>以外的所有，就达到了去除<code>/api</code>前缀的目的</p>
</li>
<li><p><code>break</code>：指令，常用的有2个，分别是：last、break</p>
<ul>
<li>last：重写路径结束后，将得到的路径重新进行一次路径匹配</li>
<li>break：重写路径结束后，不再重新匹配路径。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程框架</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>反向代理</tag>
        <tag>域名解析</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>springcloud微服务环境搭建</title>
    <url>/2020/04/29/springcloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="创建EurekaServer"><a href="#创建EurekaServer" class="headerlink" title="创建EurekaServer"></a>创建EurekaServer</h2><p>1、创建Eureka注册中心。</p>
<p>pom.xml添加EurekaServer的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>2、编写启动类</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableEurekaServer</span>   <span class="comment">//EurekaServer</span></span><br><span class="line">public class RegistryApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(RegistryApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:$&#123;server.port&#125;/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 把自己注册到eureka服务列表</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment"># 拉取eureka服务信息</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">5000</span> <span class="comment"># 每隔5秒钟，进行一次服务列表的清理</span></span><br></pre></td></tr></table></figure>

<h2 id="创建Zuul网关"><a href="#创建Zuul网关" class="headerlink" title="创建Zuul网关"></a>创建Zuul网关</h2><p>1、添加Zuul和EurekaClient的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot提供微服务检测接口，默认对外提供几个接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、编写启动类，同Eureka</p>
<p>3、配置文件</p>
<p>配置文件配置路由路径前缀和路由。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">leyou-gateway</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span> <span class="comment"># 路由路径前缀</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">item-service:</span> <span class="string">/item/**</span>   <span class="comment">#配置路由</span></span><br></pre></td></tr></table></figure>

<h2 id="springboot下mysql数据库的配置"><a href="#springboot下mysql数据库的配置" class="headerlink" title="springboot下mysql数据库的配置"></a>springboot下mysql数据库的配置</h2><p>工程中创建eureka-client的module。实现业务层接口。在该module中需要引入如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- eureka客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis的启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通用mapper启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页助手启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jdbc启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot检测服务启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在application.yml中配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;userSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driverClassName :</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">28830000</span> <span class="comment"># 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';）</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">9</span> <span class="comment"># 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count)</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 5秒钟发送一次心跳</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒不发送就过期</span></span><br><span class="line"><span class="attr">mabatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.item.pojo</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，springboot默认不需要显示配置driverClassName，默认为com.mysql.jdbc.Driver。而在mysql-connector-java6后，需要显示配置为com.mysql.cj.jdbc.Driver。</p>
<p>同时，JDBC连接Mysql6之后的版本 com.mysql.cj.jdbc.Driver， 需要指定时区serverTimezone。</p>
<p>如果该处配置出错，还会引起springboot如下报错，原因就是riverClassName配置出错。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">Error</span> creating bean with name ‘servletEndpointRegistrar’ defined <span class="keyword">in</span> class path<span class="built_in"> resource </span>…</span><br></pre></td></tr></table></figure>

<p>当然还可能是你的jdbc依赖问题，检查是否添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>编程框架</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>SpringCloud</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合的环境搭建</title>
    <url>/2020/04/19/SSM%E6%95%B4%E5%90%88%E7%9A%84%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="在Spring中整合Mybatis、SpringMVC"><a href="#在Spring中整合Mybatis、SpringMVC" class="headerlink" title="在Spring中整合Mybatis、SpringMVC"></a>在Spring中整合Mybatis、SpringMVC</h2><p>spring中整合mabatis后，mybatis-config.xml这个配置文件中无配置项</p>
<blockquote>
<p>applicationContext.xml、db.properties、log4j.properties、spring-mvc.xml、pom.xml、web.xml</p>
</blockquote>
<a id="more"></a>

<p><strong>applicationContext.xml：</strong><br>1、配置注解扫描，管理service和dao<br>2、配置数据库连接池<br>3、整合Mybatis：配置SqlSessionFactory交给IOC管理<br>4、扫描dao接口，即mapper<br>5、配置spring的声明式事务管理</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></span><br><span class="line"><span class="xml">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">       xmlns:context="http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="xml">       xmlns:aop="http://www.springframework.org/schema/aop"</span></span><br><span class="line"><span class="xml">       xmlns:tx="http://www.springframework.org/schema/tx"</span></span><br><span class="line"><span class="xml">       xsi:schemaLocation="http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="xml">	http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="xml">	http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="xml">	http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="xml">	http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="xml">	http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="xml">	http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="xml">	http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 开启注解扫描，管理service和dao --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima.ssm.service"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima.ssm.dao"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 配置连接池 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 把交给IOC管理 SqlSessionFactory --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 传入PageHelper的插件 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!-- 传入插件的对象 --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"helperDialect"</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"reasonable"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 扫描dao接口 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScanner"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.itheima.ssm.dao"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 配置Spring的声明式事务管理 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>spring-mvc.xml:</strong><br>1、配置扫描controller的注解，别的不扫描<br>2、配置视图解析器<br>3、设置静态资源不过滤<br>4、开启对SpringMVC注解的支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">           "</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描controller的注解，别的不扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima.ssm.controller"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JSP文件所在的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/pages/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件的后缀名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置静态资源不过滤 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/css/"</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/img/"</span> <span class="attr">mapping</span>=<span class="string">"/img/**"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/js/"</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">"/plugins/"</span> <span class="attr">mapping</span>=<span class="string">"/plugins/**"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启对SpringMVC注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        支持AOP的注解支持，AOP底层使用代理技术</span></span><br><span class="line"><span class="comment">        JDK动态代理，要求必须有接口</span></span><br><span class="line"><span class="comment">        cglib代理，生成子类对象，proxy-target-class="true" 默认使用cglib的方式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>web.xml:</strong><br>1、配置加载类路径的配置文件<br>2、配置监听器<br>3、前端控制器（加载classpath:springmvc.xml 服务器启动创建servlet）<br>4、解决中文乱码过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置加载类路径的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 前端控制器（加载classpath:springmvc.xml 服务器启动创建servlet） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 服务器启动的时候，让DispatcherServlet对象创建 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解决中文乱码过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>通用Mapper学习笔记</title>
    <url>/2020/04/19/%E9%80%9A%E7%94%A8Mapper%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="通用Mapper简介"><a href="#通用Mapper简介" class="headerlink" title="通用Mapper简介"></a>通用Mapper简介</h2><p>通用Mapper是一款非常好用的MyBatis插件，它能够帮助我们自动生成常用增删改查操作的SQL语句，克服MyBatis开发过程中需要大量编写SQL语句的弊端。由于通用Mapper是根据实体类的属性自动生成对应的SQL语句，所以可以说通用Mapper插件是对MyBatis在ORM方面不足的重要补充。</p>
<a id="more"></a>


<h2 id="Spring-Mybatis的通用mapper环境搭建"><a href="#Spring-Mybatis的通用mapper环境搭建" class="headerlink" title="Spring+Mybatis的通用mapper环境搭建"></a>Spring+Mybatis的通用mapper环境搭建</h2><blockquote>
<p>applicationContext.xml、db.properties、log4j.properties、spring-mvc.xml、pom.xml、web.xml</p>
</blockquote>
<p><strong>首先在spring配置文件中，修改如下的配置：</strong><br>1、配置注解扫描，管理service和dao  不变<br>2、配置数据库连接池  不变<br>3、整合Mybatis：配置SqlSessionFactory交给IOC管理  不变<br>4、扫描dao接口，即mapper  变化：通用Mapper使用：tk.mybatis.spring.mapper.MapperScannerConfigurer<br>5、配置spring的声明式事务管理  不变</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span></span><br><span class="line"><span class="xml">	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">	xmlns:aop="http://www.springframework.org/schema/aop"</span></span><br><span class="line"><span class="xml">	xmlns:context="http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="xml">	xmlns:tx="http://www.springframework.org/schema/tx"</span></span><br><span class="line"><span class="xml">	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="xml">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span><br><span class="line"><span class="xml">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span><br><span class="line"><span class="xml">		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"&gt;</span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 配置数据源 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 整合MyBatis --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 整合通用Mapper所需要做的配置修改： --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 原始全类名：org.mybatis.spring.mapper.MapperScannerConfigurer --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 通用Mapper使用：tk.mybatis.spring.mapper.MapperScannerConfigurer --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"tk.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.atguigu.mapper.mappers"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 配置Service自动扫描的包 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.atguigu.mapper.services"</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 配置声明式事务 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* *..*Service.*(..))"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"remove*"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Exception"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>在pom.xml中：</strong><br>增加依赖tk.mybatis</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-beta3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="通用Mapper实体类"><a href="#通用Mapper实体类" class="headerlink" title="通用Mapper实体类"></a>通用Mapper实体类</h2><p>考虑到基本数据类型在 Java 类中都有默认值，会导致 MyBatis 在执行相关操作 时很难判断当前字段是否为 null，所以在 MyBatis 环境下使用 Java 实体类时尽量不 要使用基本数据类型，都使用对应的包装类型。</p>
<h2 id="通用Mapper接口"><a href="#通用Mapper接口" class="headerlink" title="通用Mapper接口"></a>通用Mapper接口</h2><p>通用Mapper接口可以自定义</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体操作数据库的Mapper接口，需要继承通用Mapper提供的核心接口：Mapper&lt;Employee&gt;</span></span><br><span class="line"><span class="comment"> * 泛型类型就是实体类的类型</span></span><br><span class="line"><span class="comment"> * @author Lenovo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">EmployeeMapper</span> <span class="symbol">extends</span> <span class="symbol">Mapper</span>&lt;<span class="symbol">Employee</span>&gt; &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="table"><a href="#table" class="headerlink" title="@table"></a>@table</h3><p>作用：建立实体类和数据库表之间的对应关系。<br>默认规则：实体类类名首字母小写作为表名。Employee 类→employee 表。<br>用法：在@Table 注解的 name 属性中指定目标数据库表的表名</p>
<h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><p>作用：建立实体类字段和数据库表字段之间的对应关系。<br>默认规则： 实体类字段：驼峰式命名 数据库表字段：使用“_”区分各个单词<br>用法：在@Column 注解的 name 属性中指定目标字段的字段名</p>
<h3 id="Id"><a href="#Id" class="headerlink" title="@Id"></a>@Id</h3><p>@Id 主键明确标记和数据库表中主键字段对应的实体类字段。<br>防止通用 Mapper 将实体类中的所有字段都拿来放在一起作为联合主键。</p>
<h3 id="GeneratedValue"><a href="#GeneratedValue" class="headerlink" title="GeneratedValue"></a>GeneratedValue</h3><p>作用：让通用 Mapper 在执行 insert 操作之后将数据库自动生成的主键值回写到实体类对象中。</p>
<h3 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h3><p>用于标记不与数据库表字段对应的实体类字段。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Table(name=<span class="meta-string">"tabple_emp"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue(strategy=GenerationType.IDENTITY)</span></span><br><span class="line"><span class="keyword">private</span> Integer empId;<span class="comment">//emp_id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String empName;<span class="comment">//emp_name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name=<span class="meta-string">"emp_salary_apple"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">Double</span> empSalary;<span class="comment">//emp_salary_apple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer empAge;<span class="comment">//emp_age</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Employee() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="QBC-查询"><a href="#QBC-查询" class="headerlink" title="QBC 查询"></a>QBC 查询</h2><p>Query By Criteria Criteria 是 Criterion 的复数形式。意思是：规则、标准、准则。<br>在 SQL 语句中相当于查询条件。 QBC 查询是将查询条件通过 Java 对象进行模块化封装。</p>
<p>SelectByExample方法的调用：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">	public void test<span class="constructor">SelectByExample()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//目标：WHERE (emp_salary&gt;? AND emp_age&lt;?) OR (emp_salary&lt;? AND emp_age&gt;?)</span></span><br><span class="line">		<span class="comment">//1.创建Example对象</span></span><br><span class="line">		Example example = <span class="keyword">new</span> <span class="constructor">Example(Employee.<span class="params">class</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//***********************</span></span><br><span class="line">		<span class="comment">//i.设置排序信息</span></span><br><span class="line">		example.order<span class="constructor">By(<span class="string">"empSalary"</span>)</span>.asc<span class="literal">()</span>.order<span class="constructor">By(<span class="string">"empAge"</span>)</span>.desc<span class="literal">()</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//ii.设置“去重”</span></span><br><span class="line">		example.set<span class="constructor">Distinct(<span class="params">true</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//iii.设置select字段</span></span><br><span class="line">		example.select<span class="constructor">Properties(<span class="string">"empName"</span>,<span class="string">"empSalary"</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//***********************</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.通过Example对象创建Criteria对象</span></span><br><span class="line">		Criteria criteria01 = example.create<span class="constructor">Criteria()</span>;</span><br><span class="line">		Criteria criteria02 = example.create<span class="constructor">Criteria()</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.在两个Criteria对象中分别设置查询条件</span></span><br><span class="line">		<span class="comment">//property参数：实体类的属性名</span></span><br><span class="line">		<span class="comment">//value参数：实体类的属性值</span></span><br><span class="line">		criteria01.<span class="keyword">and</span><span class="constructor">GreaterThan(<span class="string">"empSalary"</span>, 3000)</span></span><br><span class="line">				  .<span class="keyword">and</span><span class="constructor">LessThan(<span class="string">"empAge"</span>, 25)</span>;</span><br><span class="line">		</span><br><span class="line">		criteria02.<span class="keyword">and</span><span class="constructor">LessThan(<span class="string">"empSalary"</span>, 5000)</span></span><br><span class="line">				  .<span class="keyword">and</span><span class="constructor">GreaterThan(<span class="string">"empAge"</span>, 30)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//4.使用OR关键词组装两个Criteria对象</span></span><br><span class="line">		example.<span class="keyword">or</span>(criteria02);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//5.执行查询</span></span><br><span class="line">		List&lt;Employee&gt; empList = employeeService.get<span class="constructor">EmpListByExample(<span class="params">example</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		for (Employee employee : empList) &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(employee);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义Mapper"><a href="#自定义Mapper" class="headerlink" title="自定义Mapper"></a>自定义Mapper</h2><p>spring配置文件中指定我们自定义的mapper接口，在properties的属性中配置mappers</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 整合通用Mapper所需要做的配置修改： --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 原始全类名：org.mybatis.spring.mapper.MapperScannerConfigurer --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通用Mapper使用：tk.mybatis.spring.mapper.MapperScannerConfigurer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"tk.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.atguigu.mapper.mappers"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            mappers=com.atguigu.mapper.mine_mappers.MyMapper</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="通用Mapper逆向工程"><a href="#通用Mapper逆向工程" class="headerlink" title="通用Mapper逆向工程"></a>通用Mapper逆向工程</h2><h3 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h3><p><strong>pom.xml中引入properties：</strong></p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- $</span></span><span class="template-variable">&#123;basedir&#125;</span><span class="xml"><span class="comment">引用工程根目录 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- targetJavaProject：声明存放源码的目录位置 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">targetJavaProject</span>&gt;</span>$</span><span class="template-variable">&#123;basedir&#125;</span><span class="xml">/src/main/java<span class="tag">&lt;/<span class="name">targetJavaProject</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- targetMapperPackage：声明MBG生成XxxMapper接口后存放的package位置 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">targetMapperPackage</span>&gt;</span>com.atguigu.shop.mappers<span class="tag">&lt;/<span class="name">targetMapperPackage</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- targetModelPackage：声明MBG生成实体类后存放的package位置 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">targetModelPackage</span>&gt;</span>com.atguigu.shop.entities<span class="tag">&lt;/<span class="name">targetModelPackage</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- targetResourcesProject：声明存放资源文件和XML配置文件的目录位置 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">targetResourcesProject</span>&gt;</span>$</span><span class="template-variable">&#123;basedir&#125;</span><span class="xml">/src/main/resources<span class="tag">&lt;/<span class="name">targetResourcesProject</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- targetXMLPackage：声明存放具体XxxMapper.xml文件的目录位置 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">targetXMLPackage</span>&gt;</span>mappers<span class="tag">&lt;/<span class="name">targetXMLPackage</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 通用Mapper的版本号 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">mapper.version</span>&gt;</span>4.0.0-beta3<span class="tag">&lt;/<span class="name">mapper.version</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- MySQL驱动版本号 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>pom.xml中配置MBG:</strong></p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- 配置generatorConfig.xml配置文件的路径 --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>$</span><span class="template-variable">&#123;basedir&#125;</span><span class="xml">/src/main/resources/generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- MBG插件的依赖信息 --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mysql.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mapper.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>pom.xml中需要配置mybatis和tk的依赖：</strong></p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-beta3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mysql.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="generator-generatorConfig-xml配置"><a href="#generator-generatorConfig-xml配置" class="headerlink" title="generator/generatorConfig.xml配置"></a>generator/generatorConfig.xml配置</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span></span><br><span class="line"><span class="xml">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="xml">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"config.properties"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"Mysql"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span></span></span></span><br><span class="line"><span class="xml">		defaultModelType="flat"&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 配置通用Mapper的MBG插件相关信息 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;mapper.plugin&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;mapper.Mapper&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 配置连接数据库的基本信息 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">jdbcConnection</span> </span></span></span><br><span class="line"><span class="xml">			driverClass="$</span><span class="template-variable">&#123;jdbc.driverClass&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">			connectionURL="$</span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="xml">" </span></span><br><span class="line"><span class="xml">			userId="$</span><span class="template-variable">&#123;jdbc.user&#125;</span><span class="xml">" </span></span><br><span class="line"><span class="xml">			password="$</span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="xml">"&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 配置Java实体类存放位置 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">javaModelGenerator</span> </span></span></span><br><span class="line"><span class="xml">			targetPackage="$</span><span class="template-variable">&#123;targetModelPackage&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">			targetProject="$</span><span class="template-variable">&#123;targetJavaProject&#125;</span><span class="xml">" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 配置XxxMapper.xml存放位置 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">sqlMapGenerator</span> </span></span></span><br><span class="line"><span class="xml">			targetPackage="$</span><span class="template-variable">&#123;targetXMLPackage&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">			targetProject="$</span><span class="template-variable">&#123;targetResourcesProject&#125;</span><span class="xml">" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 配置XxxMapper.java存放位置 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">javaClientGenerator</span> </span></span></span><br><span class="line"><span class="xml">			targetPackage="$</span><span class="template-variable">&#123;targetMapperPackage&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">			targetProject="$</span><span class="template-variable">&#123;targetJavaProject&#125;</span><span class="xml">" </span></span><br><span class="line"><span class="xml">			type="XMLMAPPER" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 根据数据库表生成Java文件的相关规则 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- tableName="%"表示数据库中所有表都参与逆向工程，此时使用默认规则 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 默认规则：table_dept→TableDept --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 不符合默认规则时需要使用tableName和domainObjectName两个属性明确指定 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"tabple_emp"</span> <span class="attr">domainObjectName</span>=<span class="string">"Employee"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!-- 配置主键生成策略 --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"emp_id"</span> <span class="attr">sqlStatement</span>=<span class="string">"Mysql"</span> <span class="attr">identity</span>=<span class="string">"true"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">context</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<h3 id="config-properties中配置"><a href="#config-properties中配置" class="headerlink" title="config.properties中配置"></a>config.properties中配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Database connection information</span></span><br><span class="line"><span class="attr">jdbc.driverClass</span> = com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">jdbc.url</span> = jdbc:mysql://localhost:<span class="number">3306</span>/common_mapper</span><br><span class="line"><span class="attr">jdbc.user</span> = root</span><br><span class="line"><span class="attr">jdbc.password</span> = root</span><br><span class="line"></span><br><span class="line"><span class="comment">#c3p0</span></span><br><span class="line"><span class="attr">jdbc.maxPoolSize</span>=<span class="number">50</span></span><br><span class="line"><span class="attr">jdbc.minPoolSize</span>=<span class="number">10</span></span><br><span class="line"><span class="attr">jdbc.maxStatements</span>=<span class="number">100</span></span><br><span class="line"><span class="attr">jdbc.testConnection</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mapper</span></span><br><span class="line"><span class="attr">mapper.plugin</span> = tk.mybatis.mapper.generator.MapperPlugin</span><br><span class="line"><span class="attr">mapper.Mapper</span> = tk.mybatis.mapper.common.Mapper</span><br></pre></td></tr></table></figure>

<h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">mvn mybatis-generator:<span class="keyword">generate</span></span><br></pre></td></tr></table></figure>

<h3 id="mybatis下java方式的逆向工程测试"><a href="#mybatis下java方式的逆向工程测试" class="headerlink" title="mybatis下java方式的逆向工程测试"></a>mybatis下java方式的逆向工程测试</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> MBGTest &#123;</span><br><span class="line">	</span><br><span class="line">	public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">		</span><br><span class="line">		SqlSessionFactoryBuilder builder = <span class="keyword">new</span> <span class="constructor">SqlSessionFactoryBuilder()</span>;</span><br><span class="line">		</span><br><span class="line">		InputStream inputStream = <span class="module-access"><span class="module"><span class="identifier">MBGTest</span>.</span></span><span class="keyword">class</span>.get<span class="constructor">ClassLoader()</span>.get<span class="constructor">ResourceAsStream(<span class="string">"mybatis-config.xml"</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		SqlSessionFactory factory = builder.build(inputStream);</span><br><span class="line">		</span><br><span class="line">		SqlSession session = factory.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//***********************</span></span><br><span class="line">		<span class="comment">//按照Java方式整合通用Mapper的特殊设置</span></span><br><span class="line">		<span class="comment">//i.创建MapperHelper对象</span></span><br><span class="line">		MapperHelper mapperHelper = <span class="keyword">new</span> <span class="constructor">MapperHelper()</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//ii.通过MapperHelper对象对MyBatis原生的Configuration对象进行处理</span></span><br><span class="line">		Configuration configuration = session.get<span class="constructor">Configuration()</span>;</span><br><span class="line">		mapperHelper.process<span class="constructor">Configuration(<span class="params">configuration</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//***********************</span></span><br><span class="line">		</span><br><span class="line">		EmployeeMapper mapper = session.get<span class="constructor">Mapper(EmployeeMapper.<span class="params">class</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		Iterator&lt;Employee&gt; iterator = mapper.select<span class="constructor">All()</span>.iterator<span class="literal">()</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span> (iterator.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">			Employee employee = (Employee) iterator.next<span class="literal">()</span>;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(employee);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="拓展Mapper"><a href="#拓展Mapper" class="headerlink" title="拓展Mapper"></a>拓展Mapper</h2><p>在jdbc.properties中需要在url的值中加入&amp;allowMutiQueries=true</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>MyBatchUpdateMapper&lt;T&gt; &#123;</span><br><span class="line">	</span><br><span class="line">	@UpdateProvider(<span class="attribute">type</span>=MyBatchUpdateProvider.class, <span class="attribute">method</span>=<span class="string">"dynamicSQL"</span>)</span><br><span class="line">	void batchUpdate(List&lt;T&gt; list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class MyBatchUpdateProvider extends MapperTemplate &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> MyBatchUpdateProvider(Class&lt;?&gt; mapperClass, MapperHelper mapperHelper) &#123;</span><br><span class="line">		<span class="keyword">super</span>(mapperClass, mapperHelper);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">		&lt;foreach collection="list" item="record" separator=";" &gt;</span></span><br><span class="line"><span class="comment">			UPDATE tabple_emp</span></span><br><span class="line"><span class="comment">			&lt;set&gt;</span></span><br><span class="line"><span class="comment">				emp_name=#&#123;record.empName&#125;,</span></span><br><span class="line"><span class="comment">				emp_age=#&#123;record.empAge&#125;,</span></span><br><span class="line"><span class="comment">				emp_salary=#&#123;record.empSalary&#125;,</span></span><br><span class="line"><span class="comment">			&lt;/set&gt;</span></span><br><span class="line"><span class="comment">			where emp_id=#&#123;record.empId&#125;</span></span><br><span class="line"><span class="comment">		&lt;/foreach&gt;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> batchUpdate(MappedStatement statement) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//1.创建StringBuilder用于拼接SQL语句的各个组成部分</span></span><br><span class="line">		StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//2.拼接foreach标签</span></span><br><span class="line">		builder.<span class="built_in">append</span>(<span class="string">"&lt;foreach collection=\"list\" item=\"record\" separator=\";\" &gt;"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.获取实体类对应的Class对象</span></span><br><span class="line">		Class&lt;?&gt; entityClass = <span class="keyword">super</span>.getEntityClass(statement);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//4.获取实体类在数据库中对应的表名</span></span><br><span class="line">		<span class="keyword">String</span> tableName = <span class="keyword">super</span>.tableName(entityClass);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//5.生成update子句</span></span><br><span class="line">		<span class="keyword">String</span> updateClause = SqlHelper.updateTable(entityClass, tableName);</span><br><span class="line">		</span><br><span class="line">		builder.<span class="built_in">append</span>(updateClause);</span><br><span class="line">		</span><br><span class="line">		builder.<span class="built_in">append</span>(<span class="string">"&lt;set&gt;"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//6.获取所有字段信息</span></span><br><span class="line">		Set&lt;EntityColumn&gt; columns = EntityHelper.getColumns(entityClass);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">String</span> idColumn = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">String</span> idHolder = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (EntityColumn entityColumn : columns) &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">boolean</span> isPrimaryKey = entityColumn.isId();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//7.判断当前字段是否为主键</span></span><br><span class="line">			<span class="keyword">if</span>(isPrimaryKey) &#123;</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//8.缓存主键的字段名和字段值</span></span><br><span class="line">				idColumn = entityColumn.getColumn();</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//※返回格式如:#&#123;record.age,jdbcType=NUMERIC,typeHandler=MyTypeHandler&#125;</span></span><br><span class="line">				idHolder = entityColumn.getColumnHolder(<span class="string">"record"</span>);</span><br><span class="line">				</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//9.使用非主键字段拼接SET子句</span></span><br><span class="line">				<span class="keyword">String</span> column = entityColumn.getColumn();</span><br><span class="line">				<span class="keyword">String</span> columnHolder = entityColumn.getColumnHolder(<span class="string">"record"</span>);</span><br><span class="line">				</span><br><span class="line">				builder.<span class="built_in">append</span>(column).<span class="built_in">append</span>(<span class="string">"="</span>).<span class="built_in">append</span>(columnHolder).<span class="built_in">append</span>(<span class="string">","</span>);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		builder.<span class="built_in">append</span>(<span class="string">"&lt;/set&gt;"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//10.使用前面缓存的主键名、主键值拼接where子句</span></span><br><span class="line">		builder.<span class="built_in">append</span>(<span class="string">"where "</span>).<span class="built_in">append</span>(idColumn).<span class="built_in">append</span>(<span class="string">"="</span>).<span class="built_in">append</span>(idHolder);</span><br><span class="line">		</span><br><span class="line">		builder.<span class="built_in">append</span>(<span class="string">"&lt;/foreach&gt;"</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//11.将拼接好的字符串返回</span></span><br><span class="line">		<span class="keyword">return</span> builder.toString();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>MyBatis 配置文件开启二级缓存功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在 XxxMapper 接口上使用@CacheNamespace 注解</p>
<h2 id="类型转换器TypeHandler"><a href="#类型转换器TypeHandler" class="headerlink" title="类型转换器TypeHandler"></a>类型转换器TypeHandler</h2><h3 id="对象类型的自定义类型转换器"><a href="#对象类型的自定义类型转换器" class="headerlink" title="对象类型的自定义类型转换器"></a>对象类型的自定义类型转换器</h3><p>继承BaseTypeHandler</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将 parameter 对象转换为字符串存入到 ps 对象的 i 位置 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> setNonNullParameter( </span><br><span class="line">PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType) <span class="keyword">throws</span> SQLException;</span><br><span class="line"><span class="comment">//从结果集中获取数据库对应查询结果 </span></span><br><span class="line"><span class="comment">//将字符串还原为原始的 T 类型对象 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function">T <span class="title">getNullableResult</span><span class="params">( ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function">T <span class="title">getNullableResult</span><span class="params">( ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="function">T <span class="title">getNullableResult</span><span class="params">( CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure>
<p>自定义类型转换器的注册</p>
<p>1、字段级别：@ColumnType 注解</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">ColumnType(<span class="params">typeHandler</span>=AddressTypeHandler.<span class="params">class</span>)</span></span><br><span class="line"><span class="keyword">private</span> SeasonEnum season;</span><br></pre></td></tr></table></figure>
<p>2、全局级别：在 MyBatis 配置文件中配置 typeHandlers</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Column</span></span><br><span class="line"><span class="keyword">private</span> SeasonEnum season;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- handler属性：指定自定义类型转换器全类名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- javaType属性：指定需要使用“自定义类型转换器”进行类型处理的实体类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">handler</span>=<span class="string">"com.atguigu.mapper.handlers.AddressTypeHandler"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">javaType</span>=<span class="string">"com.atguigu.mapper.entities.Address"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">handler</span>=<span class="string">"org.apache.ibatis.type.EnumOrdinalTypeHandler"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">javaType</span>=<span class="string">"com.atguigu.mapper.entities.SeasonEnum"</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举类型的类型转换器"><a href="#枚举类型的类型转换器" class="headerlink" title="枚举类型的类型转换器"></a>枚举类型的类型转换器</h3><h4 id="让通用-Mapper-把枚举类型作为简单类型处理，本质使用了-org-apache-ibatis-type-EnumTypeHandler"><a href="#让通用-Mapper-把枚举类型作为简单类型处理，本质使用了-org-apache-ibatis-type-EnumTypeHandler" class="headerlink" title="让通用 Mapper 把枚举类型作为简单类型处理，本质使用了 org.apache.ibatis.type.EnumTypeHandler"></a>让通用 Mapper 把枚举类型作为简单类型处理，本质使用了 org.apache.ibatis.type.EnumTypeHandler<E></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 整合通用Mapper所需要做的配置修改： --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 原始全类名：org.mybatis.spring.mapper.MapperScannerConfigurer --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通用Mapper使用：tk.mybatis.spring.mapper.MapperScannerConfigurer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"tk.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.atguigu.mapper.mappers"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            enumAsSimpleType=true</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="为枚举类型配置对应的类型处理器"><a href="#为枚举类型配置对应的类型处理器" class="headerlink" title="为枚举类型配置对应的类型处理器"></a>为枚举类型配置对应的类型处理器</h4><p><strong>1、内置类型转换器</strong><br>org.apache.ibatis.type.EnumTypeHandler<E>  在数据库中存储枚举值本身<br>org.apache.ibatis.type.EnumOrdinalTypeHandler<E>  在数据库中仅仅存储枚举值的索引</p>
<p><strong>类型转换器的注册</strong><br>1、不能使用@ColumnType 注解，因为有范型<br>2、全局级别注册</p>
<p><strong>2、自定义</strong></p>
]]></content>
      <categories>
        <category>编程框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>通用Mapper</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Mybatis的实现</title>
    <url>/2020/04/07/%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="Mybatis框架分析"><a href="#Mybatis框架分析" class="headerlink" title="Mybatis框架分析"></a>Mybatis框架分析</h3><p>Mybatis框架基于java，为开发者提供优质的持久层服务。Mybatis采用ORM思想，对jdbc进行封装，通过xml配置或者注解的方式，完成对数据库的持久化操作。</p>
<a id="more"></a>

<p>在maven工程中，使用Mybatis需要引入MYbatis相关坐标。具体如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>坐标引入后，需要建立一个主配置文件，该文件中配置Mybatis的主要配置。包括mysql环境，事务类型，数据库连接池的配置以及映射配置文件的位置等。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源（连接池） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置连接数据库的4个基本信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis"/&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"1234"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/itheima/dao/IUserDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>主配置文件配置完成后，根据需要建立持久层的接口，并建立与数据库中表对应的实体类。完成这些配置后，就可以选择配置文件或者注解的方式，配置Mybatis的数据库操作。<br>Mybatis通过配置文件或者注解的方式，实现持久层接口的操作数据库的方法。</p>
<h3 id="Mybatis运行分析"><a href="#Mybatis运行分析" class="headerlink" title="Mybatis运行分析"></a>Mybatis运行分析</h3><p>测试类如下。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> MybatisTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入门案例</span></span><br><span class="line"><span class="comment">     * @param args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args)throws Exception &#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件</span></span><br><span class="line">        InputStream <span class="keyword">in</span> = <span class="module-access"><span class="module"><span class="identifier">Resources</span>.</span></span>get<span class="constructor">ResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>)</span>;</span><br><span class="line">        <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">        SqlSessionFactoryBuilder builder = <span class="keyword">new</span> <span class="constructor">SqlSessionFactoryBuilder()</span>;</span><br><span class="line">        SqlSessionFactory factory = builder.build(<span class="keyword">in</span>);</span><br><span class="line">        <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">        <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">        IUserDao userDao = session.get<span class="constructor">Mapper(IUserDao.<span class="params">class</span>)</span>;</span><br><span class="line">        <span class="comment">//5.使用代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; users = userDao.find<span class="constructor">All()</span>;</span><br><span class="line">        for(User user : users)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        session.close<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">in</span>.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Mybatis读取主配置文件后，封装配置信息到Configuration类中，具体包括数据库信息，映射配置文件map等。之后创建SqlSessionFactory工厂，并调用build方法创建工厂。使用工厂生产SqlSession对象，SqlSession创建Dao接口的代理对象。使用代理对象执行Dao中的方法。最后释放资源。</p>
<p>整个过程涉及到工厂模式，构造者模式及代理模式。还涉及到反射，注解，xml解析等。</p>
<h3 id="自定义Mybatis"><a href="#自定义Mybatis" class="headerlink" title="自定义Mybatis"></a>自定义Mybatis</h3><p>自定义Mybatis，pom.xml中去掉Mybatis坐标。我们自己实现整个的xml解析流程及构造者对象，工厂对象，代理对象的创建。</p>
<p>在导入主配置文件后，自定义bulider对象及工厂对象，将主配置文件作为参数创建工厂。创建工厂的方法中解析xml文件，需要用到解析工具类，我们选择dom4j+xpath。自定义Configuration及Mapper类，用来存放我们解析的数据。其中Configuration中保存Mapper数组字段。</p>
<p>解析后返回一个带有Configuration的默认工厂。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据参数的字节输入流来构建一个SqlSessionFactory工厂</span></span><br><span class="line"><span class="comment">     * @param config</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream <span class="built_in">config</span>)</span></span>&#123;</span><br><span class="line">        Configuration cfg = XMLConfigBuilder.loadConfiguration(<span class="built_in">config</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> DefaultSqlSessionFactory(cfg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建好工厂后，调用openSession创建SqlSession对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Configuration cfg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultSqlSessionFactory</span><span class="params">(Configuration cfg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cfg = cfg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于创建一个新的操作数据库对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(cfg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用SqlSession对象中的getMapper方法，创建daoInterfaceClass的代理对象。在代理对象中增强接口方法。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用于创建代理对象</span></span><br><span class="line"><span class="comment">    * @param daoInterfaceClass dao的接口字节码</span></span><br><span class="line"><span class="comment">    * @param &lt;T&gt;</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T get<span class="constructor">Mapper(Class&lt;T&gt; <span class="params">daoInterfaceClass</span>)</span> &#123;</span><br><span class="line">    return (T) <span class="module-access"><span class="module"><span class="identifier">Proxy</span>.</span></span><span class="keyword">new</span><span class="constructor">ProxyInstance(<span class="params">daoInterfaceClass</span>.<span class="params">getClassLoader</span>()</span>,</span><br><span class="line">            <span class="keyword">new</span> Class<span class="literal">[]</span>&#123;daoInterfaceClass&#125;,<span class="keyword">new</span> <span class="constructor">MapperProxy(<span class="params">cfg</span>.<span class="params">getMappers</span>()</span>,connection));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代理对象的创建依赖MapperProxy类中invoke方法的实现。invoke中需要根据method方法，利用反射得到方法名称及所在类的名称。从而确定在配置文件中Mapper对象是否有对应key。如果有对应key，则可以根据key调用不同的Executor工具类的方法。Mapper中的value对应着sql语句及封装对象，与connection一起作为参数传递给Executor工具类的方法。<br>根据不同的配置选择不同的方法。比如配置select，则调用Executor的selectList方法。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> invoke(<span class="keyword">Object</span> proxy, Method method, <span class="keyword">Object</span>[] args) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">//1.获取方法名</span></span><br><span class="line">    <span class="keyword">String</span> methodName = method.getName();</span><br><span class="line">    <span class="comment">//2.获取方法所在类的名称</span></span><br><span class="line">    <span class="keyword">String</span> className = method.getDeclaringClass().getName();</span><br><span class="line">    <span class="comment">//3.组合key</span></span><br><span class="line">    <span class="keyword">String</span> <span class="built_in">key</span> = className+<span class="string">"."</span>+methodName;</span><br><span class="line">    <span class="comment">//4.获取mappers中的Mapper对象</span></span><br><span class="line">    Mapper mapper = mappers.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">    <span class="comment">//5.判断是否有mapper</span></span><br><span class="line">    <span class="keyword">if</span>(mapper == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"传入的参数有误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.调用工具类执行查询所有</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Executor().selectList(mapper,conn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于Executor工具类在此不展开赘述。主要功能是根据传递进来的connection和mapper信息，解析出数据库的各种信息，实现对数据库的增删改查的操作，并封装结果集为目标对象，最后返回结果。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>自定义Mabatis，根据Mybatis思想，借助工具类和自定义类实现Mybatis基本功能。在这个过程中，加深了对Mybatis处理流程的理解。<br>详细代码见我的博客。</p>
]]></content>
      <categories>
        <category>编程框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis搭建注意事项</title>
    <url>/2020/04/06/Mybatis%E6%90%AD%E5%BB%BA%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h3 id="Mybatis连接数据库配置文件"><a href="#Mybatis连接数据库配置文件" class="headerlink" title="Mybatis连接数据库配置文件"></a>Mybatis连接数据库配置文件</h3><p>Mybatis连接数据库配置文件可能会出现如下问题：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Error </span>querying database.  Cause: java.sql.SQLException: Unknown initial character set index '255' received from server.</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>查找解决方案，可借鉴该回答：<br><a href="https://blog.csdn.net/txwtech/article/details/80787886" target="_blank" rel="noopener">https://blog.csdn.net/txwtech/article/details/80787886</a><br>问题原因在于：字符集设置出现问题。MySQL驱动和数据库字符集设置不搭配<br>在druid.properies等数据库连接池配置文件中需要如下配置：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3306</span>/traveltest?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;userSSL=<span class="literal">false</span>&amp;serverTimezone=GMT%<span class="number">2B8</span></span><br><span class="line">username=root</span><br><span class="line">password=zxcvbnm123</span><br></pre></td></tr></table></figure>
<p>在Mybatis的配置文件中需要如下配置：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;property <span class="attribute">name</span>=<span class="string">"url"</span> <span class="attribute">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/eesy_mybatis?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="报错：java-不支持发行版本5"><a href="#报错：java-不支持发行版本5" class="headerlink" title="报错：java 不支持发行版本5"></a>报错：java 不支持发行版本5</h3><p>Maven项目，运行时报错如下：Error : java 不支持发行版本5。<br>项目编译配置使用的Java版本不对，需要检查一下项目及环境使用的Java编译版本配置。</p>
<ul>
<li>在Intellij中点击“File” –&gt;“Project Structure”，看一下“Project”和“Module”栏目中Java版本是否与本地一致,如果不一致，改成本地使用的Java版本。</li>
<li>点击“Settings”–&gt;“Bulid, Execution,Deployment”–&gt;“Java Compiler”，Target bytecode version设为本地Java版本。（可以在Default Settings中把Project bytecode version 一劳永逸地配置成本地Java版本）。</li>
</ul>
]]></content>
      <categories>
        <category>编程框架</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>FutrueTask探究</title>
    <url>/2020/04/05/FutrueTask%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<p>使用FutureTask实现闭锁。提前加载稍后需要的数据。FutureTask继承了<strong>Future和Runnable</strong>接口。</p>
<p>如下段代码，使用FutureTask可以实现闭锁，即可以提前加载需要的数据，在<strong>get</strong>时阻塞，直到运算完成。</p>
<p>最好的实现是实现<strong>Thread</strong>，创建线程完成。当然直接调用<strong>run</strong>方法可以运行，但没有创建线程。</p>
<a id="more"></a>

<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">futureTaskDemo</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    《JAVA并发编程实战》第五章：</span></span><br><span class="line"><span class="comment">    使用FutureTask实现闭锁。提前加载稍后需要的数据。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> Integer call() throws Exception &#123;</span><br><span class="line">            <span class="keyword">return</span> printDataTest();</span><br><span class="line">            <span class="comment">//return null;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">printDataTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"futuretesk开始了"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"futuretesk结束了"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 测试FutureTask,run方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">futureTaskTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        futureTask.<span class="built_in">run</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            futureTask.<span class="built_in">get</span>();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"结束"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 测试FutureTask,Thread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">futureTaskTestWithThread</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            futureTask.<span class="built_in">get</span>();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"结束"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语言基础</category>
        <category>JAVA并发</category>
      </categories>
      <tags>
        <tag>FutureTask</tag>
        <tag>JAVA并发编程实战</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA并发容器类探究</title>
    <url>/2020/04/05/JAVA%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E7%B1%BB%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<h2 id="同步容器类"><a href="#同步容器类" class="headerlink" title="同步容器类"></a>同步容器类</h2><p><strong>Vector Hashtable Collections.synchronizedXxx</strong><br>实现线程安全的方式：将状态封装起来，并对每个公有方法进行同步，每次只有一个线程可以访问容器的状态</p>
<p>同步容器类自身线程安全，但可能需要客户端额外加锁。<br>在迭代的时候会遇到问题。容器类的迭代使用Iterator，如果迭代期间没有加锁，并发修改容器，会抛出<strong>ConcurrentModificationException</strong>。<br>同步容器类表现行为是<strong>fail-fast</strong>。</p>
<a id="more"></a>

<p>同时要注意隐藏迭代器。toString、hashCode、equals方法等会间接进行迭代操作。</p>
<h2 id="并发容器类"><a href="#并发容器类" class="headerlink" title="并发容器类"></a>并发容器类</h2><p>同步容器类将所有对容器状态的访问都串行化，实现线程安全。眼中降低并发性，造成吞吐量降低。<br>并发容器针对多线程并发访问设计。Java5.0增加<strong>ConcurrentHashMap、CopyOnWriteArrayList、Queue、BlockingQueue</strong>。<br>Java6.0引入<strong>ConcurrentSkipListMap、ConcurrentSkipListSet</strong>。<br>迭代器具有弱一致性（Weakly Consistent）。并非<strong>fail-fast</strong>。可以容忍并发的修改。<br>并发容器使用了与同步容器完全不同的加锁策略来提供更高的并发性和伸缩性。<br>例如在 ConcurrentHashMap 中采用了一种粒度更细的加锁机制，可以称为分段锁（Lock Striping），在这种锁机制下，允许任意数量的读线程并发地访问 map，并且执行读操作的线程和写操作的线程也可以并发的访问 map，同时允许一定数量的写操作线程并发地修改 map，所以它可以在并发环境下实现更高的吞吐量。</p>
<p>没有实现加锁实现独占访问。</p>
<h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>Map中的put方法：<br>如果map中包含类该键的映射，则替换旧值，并返回旧值。<br>如果map中不包含该键的映射，则写入。返回null。同时返回null也可表示之前该键对应的值为null。</p>
<p>ConcurrentHashMap中的<strong>putIfAbsent</strong>方法：<br>如果指定的键尚未与值相关联，请将其与给定值相关联。 这相当于</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">map</span>.containsKey(<span class="built_in">key</span>)) <span class="built_in">return</span> <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="built_in">key</span>, value); <span class="keyword">else</span> <span class="built_in">return</span> <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br></pre></td></tr></table></figure>
<p>返回值：与指定键相关联的上一个值，如果没有键的映射，返回null。</p>
<h2 id="opyOnWriteArrayList"><a href="#opyOnWriteArrayList" class="headerlink" title="opyOnWriteArrayList"></a>opyOnWriteArrayList</h2><p>CopyOnWriteArrayList：只要正确发布一个事实不可变的对象，访问该对象就不需要进一步同步。CopyOnWriteArrayList利用底层数组的copy实现该安全机制。<br>每次修改时，都会创建并重新发布新的容器副本，见add源码。<br>迭代时调用COWIterator，传入底层数组的引用。在迭代器内部类复制原始数组，所以迭代器用到的数组不会修改，所以可以实现多线程同时对容器进行迭代。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public Iterator&lt;E&gt; iterator<span class="literal">()</span> &#123;</span><br><span class="line">    return <span class="keyword">new</span> COWIterator&lt;E&gt;(get<span class="constructor">Array()</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    synchronized (lock) &#123;</span><br><span class="line">        Object<span class="literal">[]</span> es = get<span class="constructor">Array()</span>;</span><br><span class="line">        <span class="built_in">int</span> len = es.length;</span><br><span class="line">        es = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span>copy<span class="constructor">Of(<span class="params">es</span>, <span class="params">len</span> + 1)</span>;</span><br><span class="line">        es<span class="literal">[<span class="identifier">len</span>]</span> = e;</span><br><span class="line">        set<span class="constructor">Array(<span class="params">es</span>)</span>;</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">COWIterator</span>&lt;E&gt; <span class="title">implements</span> <span class="title">ListIterator</span>&lt;E&gt; &#123;</span></span><br><span class="line">    <span class="comment">/** Snapshot of the array */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] snapshot;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Index of element to be returned by subsequent call to next.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">cursor</span>;</span><br><span class="line"></span><br><span class="line">    COWIterator(Object[] es, <span class="keyword">int</span> initialCursor) &#123;</span><br><span class="line">        <span class="built_in">cursor</span> = initialCursor;</span><br><span class="line">        snapshot = es;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cursor</span> &lt; snapshot.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">cursor</span> &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>设计用于在处理之前保留元素的集合。 除了基本的Collection操作之外，队列还提供额外的插入，提取和检查操作。 这些方法中的每一种都有两种形式：如果操作失败，则抛出一个异常，另一种返回一个特殊值（ null或false ，具体取决于操作）。<br>队列通常但不一定是以FIFO（先进先出）方式排序元素。<br>PriorityQueue优先级队列的元素根据它们的有序natural ordering ，或由一个Comparator在队列构造的时候提供，这取决于所使用的构造方法。 优先队列不允许null元素。 依靠自然排序的优先级队列也不允许插入不可比较的对象.<br>如果可能， offer方法插入一个元素，否则返回false 。<br>remove()和poll()方法删除并返回队列的头。 从队列中删除哪个元素是队列排序策略的一个功能，它与实现不同。 remove()和poll()方法在队列为空时的行为不同： remove()方法抛出异常，而poll()方法返回null 。<br>element()和peek()方法返回，但不要删除，头的队列。peek()方法中，如果此队列为空，则返回 null 。<br>Queue实现通常不允许插入null元素。</p>
<h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><p>支持在检索元素时等待队列变为非空的操作，并且在存储元素时等待队列中的空间变得可用。<br>不接受null元素。<br>容量有限。<br>被设计为主要用于<strong>生产者 - 消费者队列</strong>。<br>线程安全。<br>put():将指定的元素插入到此队列中，等待空格可用。<br>take():检索并删除此队列的头，如有必要，等待元素可用。</p>
<p>抛出时，表示该方法是个阻塞方法。<br>当在代码中调用了一个将抛出InterruptedException异常的方法时，该方法就成为了阻塞方法。必须处理中断的响应。两种基本方法：<br>1）传递InterruptedException。避开异常，可以不捕获该异常，抛出。或者捕获该异常后，执行简单清理工作后再次抛出异常。<br>2）恢复中断。对于不能抛出InterruptedException异常的方法，比如时Runnable的实现类时。必须捕获异常，并调用当前线程的interrupt方法恢复中断状态。这样调用栈中更高层的代码将看到引发中断。</p>
<p>不能捕获InterruptedException中断但是不做任何处理。这样高层代码无法对中断采取措施。</p>
<h2 id="同步工具类"><a href="#同步工具类" class="headerlink" title="同步工具类"></a>同步工具类</h2><p>BlockingQueue、闭锁（Latch）、FutureTask、信号量（Semaphore）、栅栏（Barrier）</p>
<h3 id="闭锁（Latch）"><a href="#闭锁（Latch）" class="headerlink" title="闭锁（Latch）"></a>闭锁（Latch）</h3><p>实现类：CountDownLatch。<br>允许一个或多个线程等待直到在其他线程中执行的一组操作完成的同步辅助。<br>给定的计数初始化。 await方法阻塞，直到由于countDown()方法的调用而导致当前计数达到零，之后所有等待线程被释放，并且任何后续的await 调用立即返回。 这是一个一次性的现象 - 计数无法重置。<br>是一种通用的同步工具，可用于多种用途。<br>示例用法1：这是一组类，其中一组工作线程使用两个倒计时锁存器：</p>
<ul>
<li>第一个是启动信号，防止任何工作人员进入，直到驾驶员准备好继续前进;</li>
<li>第二个是完成信号，允许司机等到所有的工作人员完成。<br>示例用法2：将问题划分为N个部分，用一个Runnable来描述每个部分，该Runnable执行该部分并在锁存器上倒计时，并将所有Runnables排队到执行器。 当所有子部分完成时，协调线程将能够通过等待。</li>
</ul>
<h3 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h3><p>在概念上，信号量维持一组许可证。 如果有必要，每个acquire()都会阻塞，直到许可证可用，然后才能使用它。 每个release()添加许可证，潜在地释放阻塞获取方。 但是，没有使用实际的许可证对象; Semaphore只保留可用数量的计数，并相应地执行。<br>信号量通常用于限制线程数，而不是访问某些（物理或逻辑）资源。<br>此类的构造函数可选择接受公平参数。 当设置为false时，此类不会保证线程获取许可的顺序。当公平设置为真时，信号量保证调用acquire方法的线程被选择以按照它们调用这些方法的顺序获得许可（先进先出; FIFO）。<br>信号量被初始化为一个，并且被使用，使得它只有至多一个允许可用，可以用作互斥锁。 这通常被称为二进制信号量 ，因为它只有两个状态：一个许可证可用，或零个许可证可用。</p>
<h3 id="栅栏（Barrier）"><a href="#栅栏（Barrier）" class="headerlink" title="栅栏（Barrier）"></a>栅栏（Barrier）</h3><p>实现类：CyclicBarrier。<br>允许一组线程全部等待彼此达到共同屏障点的同步辅助。 循环阻塞在涉及固定大小的线程方的程序中很有用，这些线程必须偶尔等待彼此。 屏障被称为循环 ，因为它可以在等待的线程被释放之后重新使用。<br>CyclicBarrier支持一个可选的Runnable命令，每个屏障点运行一次，调用await()。最后一个线程到达之后，Runnable中的方法执行。</p>
]]></content>
      <categories>
        <category>语言基础</category>
        <category>JAVA并发</category>
      </categories>
      <tags>
        <tag>JAVA并发编程实战</tag>
        <tag>并发容器类</tag>
        <tag>同步工具类</tag>
        <tag>ConcurrentHashMap</tag>
        <tag>CopyOnWriteArrayList</tag>
        <tag>BlockingQueue</tag>
        <tag>CountDownLatch</tag>
        <tag>Semaphore</tag>
        <tag>CyclicBarrier</tag>
      </tags>
  </entry>
  <entry>
    <title>四种线程创建方式</title>
    <url>/2020/04/05/%E5%9B%9B%E7%A7%8D%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="java中创建线程的四种方式"><a href="#java中创建线程的四种方式" class="headerlink" title="java中创建线程的四种方式"></a>java中创建线程的四种方式</h2><p>通常可以通过继承Thread和实现Runnable两种方式创建线程。启动线程需要用start方法。</p>
<blockquote>
<p>1、继承Thread类创建线程<br>2、实现Runnable接口创建线程<br>3、使用Callable和Future创建线程<br>4、使用线程池例如用Executor框架</p>
</blockquote>
<a id="more"></a>

<h2 id="创建方式实例"><a href="#创建方式实例" class="headerlink" title="创建方式实例"></a>创建方式实例</h2><h3 id="继承Thread类创建线程"><a href="#继承Thread类创建线程" class="headerlink" title="继承Thread类创建线程"></a>继承Thread类创建线程</h3><p>定义Thread类的子类，并重写该类的run()方法，该方法的方法体就是线程需要完成的任务，run()方法也称为线程执行体。<br>创建Thread子类的实例，也就是创建了线程对象.<br>启动线程，即调用线程的start()方法.</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建方式1：继承Thread类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">myThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    public void run()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"thread1创建成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 调用方式1</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">public void threadCreate1()</span><br><span class="line">&#123;</span><br><span class="line">    myThread1 thread1 = <span class="keyword">new</span> myThread1();</span><br><span class="line">    thread1.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//new myThread1().start();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现Runnable接口创建线程"><a href="#实现Runnable接口创建线程" class="headerlink" title="实现Runnable接口创建线程"></a>实现Runnable接口创建线程</h3><p>定义Runnable接口的实现类，一样要重写run()方法，这个run（）方法和Thread中的run()方法一样是线程的执行体<br>创建Runnable实现类的实例，并用这个实例作为Thread的target来创建Thread对象，这个Thread对象才是真正的线程对象<br>第三部依然是通过调用线程对象的start()方法来启动线程</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建方式2：实现Runnable接口</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myThread2</span> <span class="title">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"thread2创建成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 调用方式2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadCreate2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> myThread2()).start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此方式只是创建runnable对象，调用run方法，并没有创建线程</span></span><br><span class="line">    <span class="comment">//new myThread2().run();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用Callable和Future创建线程"><a href="#使用Callable和Future创建线程" class="headerlink" title="使用Callable和Future创建线程"></a>使用Callable和Future创建线程</h3><p>创建Callable接口的实现类，并实现call()方法，然后创建该实现类的实例（从java8开始可以直接使用Lambda表达式创建Callable对象）<br>使用FutureTask类来包装Callable对象，该FutureTask对象封装了Callable对象的call()方法的返回值<br>使用FutureTask对象作为Thread对象的target创建并启动线程（因为FutureTask实现了Runnable接口）<br>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建方式3：FutureTask</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> myThread3 implements Runnable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> run()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("thread2创建成功！");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 调用方式3</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> threadCreate3()</span><br><span class="line">&#123;</span><br><span class="line">    FutureTask&lt;<span class="type">Integer</span>&gt; futureTask = <span class="built_in">new</span> FutureTask&lt;<span class="type">Integer</span>&gt;(<span class="built_in">new</span> Callable&lt;<span class="type">Integer</span>&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="built_in">public</span> <span class="type">Integer</span> <span class="keyword">call</span>() throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("thread3创建成功！");</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("thread3结束了");</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Thread thread3 = <span class="built_in">new</span> Thread(futureTask);</span><br><span class="line"></span><br><span class="line">    thread3.<span class="keyword">start</span>();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        futureTask.<span class="keyword">get</span>();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("结束");</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用线程池例如用Executor框架"><a href="#使用线程池例如用Executor框架" class="headerlink" title="使用线程池例如用Executor框架"></a>使用线程池例如用Executor框架</h3><p>该部分在Executor框架中展开阐述。</p>
<h2 id="Runnable创建线程的优势"><a href="#Runnable创建线程的优势" class="headerlink" title="Runnable创建线程的优势"></a>Runnable创建线程的优势</h2><p>建议使用Runnable来实现多线程。<br>1、<strong>Runnable适合于多个相同程序代码线程去处理统一资源的情况</strong>，把虚拟的cpu（线程）同程序的代码，数据有效分离，较好体现面向对象的编程的思想</p>
<p>2、<strong>Runnable可以避免由于java的单继承机制带来的局限</strong>。可以再继承其他类的同时，还能实现多线程的功能。</p>
<p>3、Runnable能增加程序的健壮性。<strong>代码能够被多个线程共享</strong>。</p>
<p>继承Thread方式创建线程，线程之间不能做资源共享。Runnable接口方式创建线程，通过下列方式启动线程，每启动一次都会创建一个test相关的线程，所以可以实现资源共享。几个线程共享Runnable接口实现类中的资源。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> ThreadDemo</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String <span class="literal">[]</span>args)</span><br><span class="line">    &#123;</span><br><span class="line">        ThreadTest test=<span class="keyword">new</span> <span class="constructor">ThreadTest()</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">test</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">test</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">test</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">test</span>)</span>.start<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> ThreadTest implements Runnable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> count=<span class="number">10</span>;</span><br><span class="line">    public void run<span class="literal">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(count&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"   "</span>+count--);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="run和start"><a href="#run和start" class="headerlink" title="run和start"></a>run和start</h2><p>关于调用run方法和start方法：</p>
<p>1、start()方法:启动一个线程，调用该Runnable对象的run()方法，<strong>不能多次启动一个线程</strong>。</p>
<p>2、run()方法:在本线程内调用该Runnable对象的run()方法，可以<strong>重复多次调用</strong>。</p>
<p>3、用start()方法来启动线程，真正实现了<strong>多线程运行</strong>，这时无需等待run方法体代码执行完毕而直接继续执行下面的代码。只有调用start方法才是交给jvm管理，才是多线程。</p>
<p>4、run()方法只是类的一个<strong>普通方法</strong>而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，要等待run方法体执行完毕后才可继续执行下面的代码。</p>
]]></content>
      <categories>
        <category>语言基础</category>
        <category>JAVA并发</category>
      </categories>
      <tags>
        <tag>Executor框架</tag>
        <tag>并发</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Executor框架探究</title>
    <url>/2020/04/05/Executor%E6%A1%86%E6%9E%B6%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<h2 id="Executor框架"><a href="#Executor框架" class="headerlink" title="Executor框架"></a>Executor框架</h2><p>Executor框架的最大优点是把任务的<strong>提交和执行解耦</strong>。要执行任务的人只需把Task描述清楚，然后提交即可。这个Task是怎么被执行的，被谁执行的，什么时候执行的，提交的人就不用关心了。具体点讲，提交一个Callable对象给ExecutorService（如最常用的线程池ThreadPoolExecutor），将得到一个Future对象，调用Future对象的get方法等待执行结果就好了。Executor框架的内部使用了线程池机制，它在java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。</p>
<a id="more"></a> 

<p>Executor框架包括：<strong>线程池，Executor，Executors，ExecutorService，CompletionService，Future，Callable</strong>等。<br>Executor接口中之定义了一个方法<strong>execute</strong>（Runnable command），该方法接收一个Runnable实例，它用来执行一个任务，任务即一个实现了Runnable接口的类。<br><strong>ExecutorService</strong>接口继承自Executor接口，它提供了更丰富的实现多线程的方法，比如，ExecutorService提供了关闭自己的方法，以及可为跟踪一个或多个异步任务执行状况而生成 Future 的方法。<br>可以通过多种方法创建Future来描述任务。ExecutorService中所有的<strong>submit</strong>方法都返回Future，从而将一个Runnable或者callable提交给Executor并得到一个Future来获取任务的执行结果或者取消任务。<br>还可以显示的为指定的Runnable或者callable实例化一个FutureTask。从java6开始ExecutorService可以改写newTaskFor方法，创建一个新的FutureTask。</p>
<h2 id="Executor生命周期"><a href="#Executor生命周期" class="headerlink" title="Executor生命周期"></a>Executor生命周期</h2><p>可以调用ExecutorService的<strong>shutdown（）</strong>方法来平滑地关闭 ExecutorService，调用该方法后，将导致ExecutorService停止接受任何新的任务且等待已经提交的任务执行完成(已经提交的任务会分两类：一类是已经在执行的，另一类是还没有开始执行的)，当所有已经提交的任务执行完毕后将会关闭ExecutorService。因此我们一般用该接口来实现和管理多线程。<br>ExecutorService的生命周期包括三种状态：<strong>运行、关闭、终止</strong>。创建后便进入运行状态，当调用了shutdown（）方法时，便进入关闭状态，此时意味着ExecutorService不再接受新的任务，但它还在执行已经提交了的任务，当素有已经提交了的任务执行完后，便到达终止状态。如果不调用shutdown（）方法，ExecutorService会一直处在运行状态，不断接收新的任务，执行新的任务，服务器端一般不需要关闭它，保持一直运行即可。</p>
<h3 id="ExecutorService的invokeAll方法"><a href="#ExecutorService的invokeAll方法" class="headerlink" title="ExecutorService的invokeAll方法"></a>ExecutorService的invokeAll方法</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? <span class="keyword">extends</span> Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                            <span class="keyword">long</span> timeout,</span><br><span class="line">                            TimeUnit unit)</span><br><span class="line">                    <span class="keyword">throws</span> InterruptedException</span><br></pre></td></tr></table></figure>
<p>多个任务提交并返回一组Future结果。</p>
<h3 id="CompletionService"><a href="#CompletionService" class="headerlink" title="CompletionService"></a>CompletionService</h3><p>一种将新异步任务的生产与已完成任务的结果消耗相分离的服务。 生产者submit执行任务。 消费者take完成任务并按照完成的顺序处理其结果。<br>CompletionService将<strong>Executor和BlockingQueue</strong>结合在一起。<br><strong>ExecutorCompletionService</strong>是CompletionService实现类。计算完成后，调用FutureTask的<strong>done</strong>方法。当提交任务时，包装任务为一个<strong>QueueingFuture</strong>（FutureTask的子类），改写子类的done方法。将结果放入<strong>BlockingQueue</strong>中。<br>take或poll方法委托给lockingQueue，阻塞式获得队列中完成的任务的Future结果。</p>
<h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p>Executors提供了一系列<strong>工厂方法</strong>用于创先线程池，返回的线程池都实现了ExecutorService接口。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">FixedThreadPool</span>(int nThreads)</span><br></pre></td></tr></table></figure>
<p>创建固定数目线程的线程池。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">CachedThreadPool</span>()</span><br></pre></td></tr></table></figure>
<p>创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线   程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">SingleThreadExecutor</span>()</span><br></pre></td></tr></table></figure>
<p>创建一个单线程化的Executor。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="keyword">new</span><span class="type">ScheduledThreadPool</span>(int corePoolSize)</span><br></pre></td></tr></table></figure>
<p>创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</p>
<p>一般来说，<strong>CachedTheadPool</strong>在程序执行过程中通常会创建与所需数量相同的线程，然后在它回收旧线程时停止创建新线程，因此它是合理的Executor的首选，只有当这种方式会引发问题时（比如需要大量长时间面向连接的线程时），才需要考虑用FixedThreadPool。</p>
<h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>newFixedThreadPool、newCachedThreadPool、newSingleThreadExecutor均返回<strong>ThreadPoolExecutor</strong>对象。该类继承自<strong>AbstractExecutorService</strong>，AbstractExecutorService继承自ThreadPoolExecutor。<br>ThreadPoolExecutor构造函数的参数如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">public</span> <span class="string">ThreadPoolExecutor(int corePoolSize,</span></span><br><span class="line">                            <span class="attr">int</span> <span class="string">maximumPoolSize,</span></span><br><span class="line">                            <span class="attr">long</span> <span class="string">keepAliveTime,</span></span><br><span class="line">                            <span class="attr">TimeUnit</span> <span class="string">unit,</span></span><br><span class="line">                            <span class="meta">BlockingQueue&lt;Runnable&gt;</span> <span class="string">workQueue,</span></span><br><span class="line">                            <span class="attr">ThreadFactory</span> <span class="string">threadFactory,</span></span><br><span class="line">                            <span class="attr">RejectedExecutionHandler</span> <span class="string">handler)</span></span><br></pre></td></tr></table></figure>

<p>任何<strong>BlockingQueue</strong>可用于传送和保留提交的任务。 这个队列的使用与池大小相互作用：<br>如果少于corePoolSize线程正在运行，Executor总是喜欢添加一个新线程，而不是排队。<br>如果corePoolSize或更多的线程正在运行，Executor总是喜欢排队请求而不是添加一个新的线程。<br>如果请求无法排队，则会创建一个新线程，除非这将超出maximumPoolSize，否则任务将被拒绝。</p>
<h4 id="排队策略"><a href="#排队策略" class="headerlink" title="排队策略"></a>排队策略</h4><p>排队有三种一般策略：<br><strong>直接切换</strong> 一个工作队列的一个很好的默认选择是一个SynchronousQueue ，将任务交给线程，无需另外控制。 在这里，如果没有线程可以立即运行，那么尝试排队任务会失败，因此将构建一个新的线程。 处理可能具有内部依赖关系的请求集时，此策略可避免锁定。 直接切换通常需要无限制的maximumPoolSizes，以避免拒绝新提交的任务。 这反过来允许无限线程增长的可能性，当命令继续以平均速度比他们可以处理的速度更快地到达时。<br><strong>无界队列</strong> 使用无界队列（例如LinkedBlockingQueue没有预定容量）会导致新的任务，在队列中等待，当所有corePoolSize线程都很忙。 因此，不会再创建corePoolSize线程。 （因此，最大值大小的值没有任何影响。）每个任务完全独立于其他任务时，这可能是适当的，因此任务不会影响其他执行; 例如，在网页服务器中。 虽然这种排队风格可以有助于平滑瞬态突发的请求，但是当命令继续达到的平均速度比可以处理的速度更快时，它承认无界工作队列增长的可能性。<br><strong>有边界的队列</strong> 有限队列（例如， ArrayBlockingQueue ）有助于在使用有限maxPoolSizes时防止资源耗尽，但可能更难调整和控制。 队列大小和最大池大小可能彼此交易：使用大队列和小型池可以最大限度地减少CPU使用率，OS资源和上下文切换开销，但可能导致人为的低吞吐量。 如果任务频繁阻塞（例如，如果它们是I / O绑定），则系统可能能够安排比您允许的更多线程的时间。 使用小型队列通常需要较大的池大小，这样可以使CPU繁忙，但可能会遇到不可接受的调度开销，这也降低了吞吐量。</p>
<h4 id="典型的实现"><a href="#典型的实现" class="headerlink" title="典型的实现"></a>典型的实现</h4><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">SingleThreadExecutor</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">FinalizableDelegatedExecutorService</span></span><br><span class="line"><span class="type"></span>        (<span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0</span>L, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">FixedThreadPool</span>(int nThreads) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                    <span class="number">0</span>L, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">CachedThreadPool</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                    <span class="number">60</span>L, TimeUnit.SECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="type">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>语言基础</category>
        <category>JAVA并发</category>
      </categories>
      <tags>
        <tag>JAVA并发编程实战</tag>
        <tag>Executor框架</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap源码探究</title>
    <url>/2020/04/05/HashMap%E6%BA%90%E7%A0%81%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<h2 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h2><p>HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。<br>HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。允许null的值和null键。</p>
<a id="more"></a>

<h2 id="基本实现原理"><a href="#基本实现原理" class="headerlink" title="基本实现原理"></a>基本实现原理</h2><p>HashMap 基于 Hash 算法实现的。<br>当我们往Hashmap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标。<br>存储时，如果出现hash值相同的key，此时有两种情况。(1)如果key相同，则覆盖原始值；(2)如果key不同（出现冲突），则将当前的key-value放入链表中。<br>获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。<br>理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。</p>
<h2 id="HashMap的底层实现"><a href="#HashMap的底层实现" class="headerlink" title="HashMap的底层实现"></a>HashMap的底层实现</h2><p>数组的特点是：寻址容易，插入和删除困难；链表的特点是：寻址困难，但插入和删除容易；所以我们将数组和链表结合在一起，发挥两者各自的优势，使用一种叫做拉链法的方式可以解决哈希冲突。<br>jdk1.8在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</p>
<h2 id="hashCode（）与equals（）的相关规定"><a href="#hashCode（）与equals（）的相关规定" class="headerlink" title="hashCode（）与equals（）的相关规定"></a>hashCode（）与equals（）的相关规定</h2><p>如果两个对象相等，则hashcode一定也是相同的。<br>两个对象相等,对两个equals方法返回true。<br>两个对象有相同的hashcode值，它们也不一定是相等的。<br>综上，equals方法被覆盖过，则hashCode方法也必须被覆盖。<br>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</p>
<h2 id="与equals的区别"><a href="#与equals的区别" class="headerlink" title="==与equals的区别"></a>==与equals的区别</h2><p>==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是不是相同。<br>==是指对内存地址进行比较 equals()是对字符串的内容进行比较3.==指引用是否相同 equals()指的是值是否相同。</p>
<h2 id="HashMap的put方法的具体流程？"><a href="#HashMap的put方法的具体流程？" class="headerlink" title="HashMap的put方法的具体流程？"></a>HashMap的put方法的具体流程？</h2><p>当我们put的时候，首先计算 key的hash值，这里调用了 hash方法，hash方法实际是让key.hashCode()与key.hashCode()&gt;&gt;&gt;16进行异或操作，高16bit补0，一个数和0异或不变，所以 hash 函数大概的作用就是：高16bit不变，低16bit和高16bit做了一个异或，目的是减少碰撞。按照函数注释，因为bucket数组大小是2的幂，计算下标index = (table.length - 1) &amp; hash，如果不做 hash 处理，相当于散列生效的只有几个低 bit 位，为了减少散列的碰撞，设计者综合考虑了速度、作用、质量之后，使用高16bit和低16bit异或来简单处理减少碰撞，而且JDK8中用了复杂度 O（logn）的树结构来提升碰撞下的性能。</p>
<p>put方法调用putVal方法,进行hash运算，作为参数传递给putVal。</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">public V put(K<span class="built_in"> key</span>, V <span class="keyword">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash<span class="built_in">(key</span>),<span class="built_in"> key</span>, <span class="keyword">value</span>,<span class="built_in"> false</span>,<span class="built_in"> true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部hash运算，减少碰撞。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//高16bit不变，低16bit和高16bit做了一个异或，目的是减少碰撞</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> hash(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">key</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = <span class="built_in">key</span>.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V putVal(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">boolean</span> onlyIfAbsent,</span><br><span class="line">            <span class="built_in">boolean</span> evict) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="built_in">int</span> n, i;</span><br><span class="line">    <span class="comment">// 步骤①：tab为空则创建 </span></span><br><span class="line">    <span class="comment">// table未初始化或者长度为0，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 步骤②：计算index，并对null做处理  </span></span><br><span class="line">    <span class="comment">// (n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 桶中已经存在元素</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 步骤③：节点key存在，直接覆盖value </span></span><br><span class="line">        <span class="comment">// 比较桶中第一个元素(数组中的结点)的hash值相等，key相等</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">            <span class="comment">// 将第一个元素赋值给e，用e来记录</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 步骤④：判断该链为红黑树 </span></span><br><span class="line">        <span class="comment">// hash值不相等，即key不相等；为红黑树结点</span></span><br><span class="line">        <span class="comment">// 如果当前元素类型为TreeNode，表示为红黑树，putTreeVal返回待存放的node, e可能为nul</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, <span class="built_in">key</span>, value);</span><br><span class="line">        <span class="comment">// 步骤⑤：该链为链表 </span></span><br><span class="line">        <span class="comment">// 为链表结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在链表最末插入结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 到达链表的尾部</span></span><br><span class="line">                <span class="comment">//判断该链表尾部指针是不是空的</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 在尾部插入新结点</span></span><br><span class="line">                    p.next = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//判断链表的长度是否达到转化红黑树的临界值，临界值为8表节点大于8且数组长度大于等于64</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">//链表结构转树形结构</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断链表中结点的key值与插入的元素的key值是否相等</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断当前的key已经存在的情况下，再来一个相同的hash值、key值时，返回新来的value这个值</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//用新值替换旧值</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 步骤⑥：超过最大容量就扩容 </span></span><br><span class="line">    <span class="comment">// 实际大小大于阈值则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++<span class="built_in">size</span> &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Node类的定义。可以看出，Node中存放运算后的hash值，键值对，及next节点。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;K,V&gt; <span class="title">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;K,V&gt; &#123;</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o instanceof Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.<span class="built_in">getKey</span>()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>链表节点大于8且数组长度大于等于64时，链表转化为红黑树。当链表节点大于8且数组长度小于64时，优先扩容。下面为treeifyBin源码。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) &#123;</span><br><span class="line">    int n, index; Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> (<span class="attr">tab</span> == <span class="literal">null</span> || (<span class="attr">n</span> = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="attr">e</span> = tab[<span class="attr">index</span> = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; <span class="attr">hd</span> = <span class="literal">null</span>, <span class="attr">tl</span> = <span class="literal">null</span>;</span><br><span class="line">        do &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; <span class="attr">p</span> = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="attr">tl</span> == <span class="literal">null</span>)</span><br><span class="line">                <span class="attr">hd</span> = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.<span class="attr">prev</span> = tl;</span><br><span class="line">                tl.<span class="attr">next</span> = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attr">tl</span> = p;</span><br><span class="line">        &#125; while ((<span class="attr">e</span> = e.next) != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HashMap的扩容"><a href="#HashMap的扩容" class="headerlink" title="HashMap的扩容"></a>HashMap的扩容</h2><p>在jdk1.8中，resize方法是在hashmap中的键值对大于阀值时或者初始化时，就调用resize方法进行扩容；</p>
<p>每次扩展的时候，都是扩展2倍；</p>
<p>扩展后Node对象的位置要么在原位置，要么移动到原位置偏移原容量值的位置。</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;<span class="comment">//oldTab指向hash桶数组</span></span><br><span class="line">    int oldCap = (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : <span class="type">oldTab</span>.length;</span><br><span class="line">    int oldThr = threshold;</span><br><span class="line">    int <span class="keyword">new</span><span class="type">Cap</span>, <span class="keyword">new</span><span class="type">Thr</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;<span class="comment">//如果oldCap不为空的话，就是hash桶数组不为空</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="comment">//如果大于最大容量了，就赋值为整数最大的阀值</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;<span class="comment">//返回</span></span><br><span class="line">        &#125;<span class="comment">//如果当前hash桶数组的长度在扩容后仍然小于最大容量 并且oldCap大于默认值16</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">new</span><span class="type">Cap</span> = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="keyword">new</span><span class="type">Thr</span> = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold 双倍扩容阀值threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 旧的容量为0，但threshold大于零，代表有参构造有cap传入，threshold已经被初始化成最小2的n次幂</span></span><br><span class="line">    <span class="comment">// 直接将该值赋给新的容量</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        <span class="keyword">new</span><span class="type">Cap</span> = oldThr;</span><br><span class="line">    <span class="comment">// 无参构造创建的map，给出默认容量和threshold 16, 16*0.75</span></span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="keyword">new</span><span class="type">Cap</span> = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        <span class="keyword">new</span><span class="type">Thr</span> = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新的threshold = 新的cap * 0.75</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Thr</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        float ft = (float)<span class="keyword">new</span><span class="type">Cap</span> * loadFactor;</span><br><span class="line">        <span class="keyword">new</span><span class="type">Thr</span> = (<span class="keyword">new</span><span class="type">Cap</span> &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (int)ft : <span class="type">Integer</span>.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = <span class="keyword">new</span><span class="type">Thr</span>;</span><br><span class="line">    <span class="comment">// 计算出新的数组长度后赋给当前成员变量table</span></span><br><span class="line">    @SuppressWarnings(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        Node&lt;K,V&gt;[] <span class="keyword">new</span><span class="type">Tab</span> = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="type">Node</span>[<span class="keyword">new</span><span class="type">Cap</span>];<span class="comment">//新建hash桶数组</span></span><br><span class="line">    table = <span class="keyword">new</span><span class="type">Tab</span>;<span class="comment">//将新数组的值复制给旧的hash桶数组</span></span><br><span class="line">    <span class="comment">// 如果原先的数组没有初始化，那么resize的初始化工作到此结束，否则进入扩容元素重排逻辑，使其均匀的分散</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历新数组的所有桶下标</span></span><br><span class="line">        <span class="keyword">for</span> (int j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 旧数组的桶下标赋给临时变量e，并且解除旧数组中的引用，否则就数组无法被GC回收</span></span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 如果e.next==null，代表桶中就一个元素，不存在链表或者红黑树</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">// 用同样的hash映射算法把该元素加入新的数组</span></span><br><span class="line">                    <span class="keyword">new</span><span class="type">Tab</span>[e.hash &amp; (<span class="keyword">new</span><span class="type">Cap</span> - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 如果e是TreeNode并且e.next!=null，那么处理树中元素的重排</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e instanceof TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, <span class="keyword">new</span><span class="type">Tab</span>, j, oldCap);</span><br><span class="line">                <span class="comment">// e是链表的头并且e.next!=null，那么处理链表中元素重排</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// loHead,loTail 代表扩容后不用变换下标，见注1</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    <span class="comment">// hiHead,hiTail 代表扩容后变换下标，见注1</span></span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">// 遍历链表</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;             </span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                <span class="comment">// 初始化head指向链表当前元素e，e不一定是链表的第一个元素，初始化后loHead</span></span><br><span class="line">                                <span class="comment">// 代表下标保持不变的链表的头元素</span></span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span>                                </span><br><span class="line">                                <span class="comment">// loTail.next指向当前e</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            <span class="comment">// loTail指向当前的元素e</span></span><br><span class="line">                            <span class="comment">// 初始化后，loTail和loHead指向相同的内存，所以当loTail.next指向下一个元素时，</span></span><br><span class="line">                            <span class="comment">// 底层数组中的元素的next引用也相应发生变化，造成lowHead.next.next.....</span></span><br><span class="line">                            <span class="comment">// 跟随loTail同步，使得lowHead可以链接到所有属于该链表的元素。</span></span><br><span class="line">                            loTail = e;                           </span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                <span class="comment">// 初始化head指向链表当前元素e, 初始化后hiHead代表下标更改的链表头元素</span></span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 遍历结束, 将tail指向null，并把链表头放入新数组的相应下标，形成新的映射。</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">new</span><span class="type">Tab</span>[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">new</span><span class="type">Tab</span>[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Tab</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ConcurrentHashMap实现"><a href="#ConcurrentHashMap实现" class="headerlink" title="ConcurrentHashMap实现"></a>ConcurrentHashMap实现</h2><p>在JDK1.7中，ConcurrentHashMap采用Segment + HashEntry的方式进行实现。</p>
<p>在JDK1.8中，放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保证并发安全进行实现，synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N倍。</p>
]]></content>
      <categories>
        <category>语言基础</category>
      </categories>
      <tags>
        <tag>HashMap</tag>
        <tag>容器类</tag>
        <tag>非线程安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal深入探究</title>
    <url>/2020/03/29/ThreadLocal%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6/</url>
    <content><![CDATA[<h2 id="ThreadLocal简介"><a href="#ThreadLocal简介" class="headerlink" title="ThreadLocal简介"></a>ThreadLocal简介</h2><p>ThreadLocal是线程Thread中属性<strong>threadLocals</strong>的管理者。<br>ThreadLocal类用来提供<strong>线程内部的局部变量</strong>。这种变量在多线程环境下访问(通过get或set方法访问)时能保证各个线程里的变量相对独立于其他线程内的变量。ThreadLocal实例通常来说都是<strong>private static</strong>类型的，用于关联线程和线程的上下文。</p>
<a id="more"></a>

<h2 id="与Thread、ThreadLocalMap的联系"><a href="#与Thread、ThreadLocalMap的联系" class="headerlink" title="与Thread、ThreadLocalMap的联系"></a>与Thread、ThreadLocalMap的联系</h2><p>ThreadLocal类内部定义<strong>ThreadLocalMap</strong>类。ThreadLocalMap内部存储着Entry(ThreadLocal<?> k, Object v) 数组，键类型为ThreadLocal<?> 。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">static <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    static <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">        <span class="type">Object</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="type">Entry</span>(<span class="type">ThreadLocal</span>&lt;?&gt; k, <span class="type">Object</span> v) &#123;</span><br><span class="line">            <span class="keyword">super</span>(k);</span><br><span class="line">            value = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Thread中定义如下的threadLocals。threadLocals作为Thread中的属性，是一个特殊的ThreadLocalMap 。每一个线程管理自己的threadLocals，key值是<strong>ThreadLocal</strong>实例，而value值这是我们设置的值。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">ThreadLocal.ThreadLocalMap <span class="attr">threadLocals</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocal内部方法实现"><a href="#ThreadLocal内部方法实现" class="headerlink" title="ThreadLocal内部方法实现"></a>ThreadLocal内部方法实现</h2><p>initialValue。该函数在调用get函数的时候会第一次调用，但是如果一开始就调用了set函数，则该函数不会被调用。通常该函数只会被调用一次，除非手动调用了remove函数之后又调用get函数，这种情况下，get函数中还是会调用initialValue函数。该函数是protected类型的，很显然是建议在子类重载该函数的，所以通常该函数都会以匿名内部类的形式被重载，以指定初始值，</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>get。该函数用来获取与当前线程关联的ThreadLocal的值，如果当前线程没有该ThreadLocal的值，则调用initialValue函数获取初始值返回。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="keyword">get</span>() &#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//查找map中以当前threadlocal为键的键值对，如果没有返回null</span></span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span></span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有map或者没有找到对应的键的键值对，则创建map或设置初始值</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>getMap。返回丹当前线程的threadLocals。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>setInitialValue</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> T set<span class="constructor">InitialValue()</span> &#123;</span><br><span class="line">    <span class="comment">//initialValue返回值作为初始值</span></span><br><span class="line">    T value = initial<span class="constructor">Value()</span>;</span><br><span class="line">    Thread t = <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>;</span><br><span class="line">    ThreadLocalMap map = get<span class="constructor">Map(<span class="params">t</span>)</span>;</span><br><span class="line">    <span class="comment">//map存在则插入键值对</span></span><br><span class="line">    <span class="keyword">if</span> (map != null) &#123;</span><br><span class="line">        map.set(this, value);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//map不存在创建map，并初始化键值对（this，value）</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        create<span class="constructor">Map(<span class="params">t</span>, <span class="params">value</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (this instanceof TerminatingThreadLocal) &#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">TerminatingThreadLocal</span>.</span></span>register((TerminatingThreadLocal&lt;?&gt;) this);</span><br><span class="line">    &#125;</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>createMap</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">void create<span class="constructor">Map(Thread <span class="params">t</span>, T <span class="params">firstValue</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//map不存在创建map，并初始化键值对（this，value）</span></span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> <span class="constructor">ThreadLocalMap(<span class="params">this</span>, <span class="params">firstValue</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>set</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="literal">void</span> <span class="built_in">set</span>(T value) &#123;</span><br><span class="line">    <span class="keyword">Thread</span> t = <span class="keyword">Thread</span>.currentThread();</span><br><span class="line">    ThreadLocalMap <span class="built_in">map</span> = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">map</span> != <span class="built_in">null</span>) &#123;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">set</span>(this, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>remove</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">        <span class="keyword">if</span> (m != <span class="literal">null</span>) &#123;</span><br><span class="line">            m.<span class="keyword">remove</span>(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>ThreadLocalMap是使用ThreadLocal的<strong>弱引用</strong>作为Key。</p>
]]></content>
      <categories>
        <category>语言基础</category>
        <category>JAVA并发</category>
      </categories>
      <tags>
        <tag>JAVA并发编程实战</tag>
        <tag>并发</tag>
        <tag>JAVA源码</tag>
        <tag>多线程</tag>
        <tag>线程隔离</tag>
      </tags>
  </entry>
  <entry>
    <title>那些基于next搭建hexo我踩过的坑</title>
    <url>/2020/03/29/%E9%82%A3%E4%BA%9B%E5%9F%BA%E4%BA%8Enext%E6%90%AD%E5%BB%BAhexo%E6%88%91%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h2 id="为什么选择next"><a href="#为什么选择next" class="headerlink" title="为什么选择next"></a>为什么选择next</h2><p>近期一直想搭建自己的博客，记录下自己的学习历程。之前一直使用CSDN写一点东西，还是会感到受限制，当然也想更加极客范一点，所以就有了搭自己博客的想法。选择hexo一方面是hexo是出色的静态博客框架，对于我们这些对前端技术不是很了解的同学们较为友好，可以基于现有主题改造成自己喜欢的样式。另一方面也是用户较多，遇到问题相关的解决方案也很多。可以让我们专注于博客的内容上。</p>
<a id="more"></a>

<p>为什么选择next呢？刚开始搭建的时候，我尝试过两款视觉效果较为绚丽的主题，一个是matery，一个是butterfly。这两款主题在我的多次尝试下，在我的系统下一直配置出错，搜索解决方案调试也无果，最终放弃。选择next一方面是next主题简约大气的主题风格，再有就是next较为强大的配置选项。下面介绍我的搭建历程，希望能为大家提供借鉴。</p>
<h2 id="hexo静态博客搭建流程"><a href="#hexo静态博客搭建流程" class="headerlink" title="hexo静态博客搭建流程"></a>hexo静态博客搭建流程</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>hexo框架需要依赖Node.js环境，所以需要安装Node.js。此安装会同时安装npm。安装完成后可以输入如下指令查看是否安装成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>为加快npm下载速度，可以设置永久npm镜像源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看npm的配置</span></span><br><span class="line">npm config list</span><br><span class="line"><span class="comment"># 默认源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br><span class="line"><span class="comment"># 临时改变镜像源</span></span><br><span class="line">npm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 永久设置为淘宝镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 另一种方式，编辑 ~/.npmrc 加入下面内容</span></span><br><span class="line">registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h4 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h4><blockquote>
<p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 Git 是 [Linus Torvalds](<a href="https://baike.baidu.com/item/&gt;Linus" target="_blank" rel="noopener">https://baike.baidu.com/item/&gt;Linus</a> Torvalds/9336769) 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>
</blockquote>
<p>git的安装和配置就不在此赘述了。</p>
<h4 id="hexo安装与配置"><a href="#hexo安装与配置" class="headerlink" title="hexo安装与配置"></a>hexo安装与配置</h4><h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><p>输入如下命令：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> -g hexo</span><br></pre></td></tr></table></figure>
<h5 id="创建hexo文件夹"><a href="#创建hexo文件夹" class="headerlink" title="创建hexo文件夹"></a>创建hexo文件夹</h5><p>创建hexo文件夹，并cd进入文件夹中。</p>
<h5 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h5><p>cd进入文件夹后，初始化hexo。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo init</span></span><br></pre></td></tr></table></figure>
<p>hexo初始化完成。可以在hexo -g,hexo -s后在本地运行。</p>
<p>hexo初始化完成后，下面我们的任务就是配置拓展hexo的功能模块，并优化hexo主题。</p>
<p>hexo配置到github就不在此赘述了。</p>
<h2 id="next主题安装配置"><a href="#next主题安装配置" class="headerlink" title="next主题安装配置"></a>next主题安装配置</h2><p>下面介绍next主题安装及配置。本文安装的next版本为6.0版本。在Next6版本上其实增加了很多Next5需要手动配置的东西，并且Next5已经停止维护了，如果不太喜欢自己手动去配置的话，建议使用Next6版本。</p>
<h3 id="next安装"><a href="#next安装" class="headerlink" title="next安装"></a>next安装</h3><p>进入博客根目录下，进入themes目录，执行下列克隆操作。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/theme-<span class="keyword">next</span>/hexo-theme-<span class="keyword">next</span>.git</span><br></pre></td></tr></table></figure>
<p>在themes目录下会生成hexo-theme-next文件夹。</p>
<h3 id="hexo配置next主题"><a href="#hexo配置next主题" class="headerlink" title="hexo配置next主题"></a>hexo配置next主题</h3><p>在管理员权限下博客根目录下打开_config.yml文件：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">vim <span class="module-access"><span class="module"><span class="identifier">_config</span>.</span></span>yml</span><br></pre></td></tr></table></figure>
<p>找到theme，修改为hexo-theme-next。便完成了主题配置。</p>
<h3 id="next主题修改及配置"><a href="#next主题修改及配置" class="headerlink" title="next主题修改及配置"></a>next主题修改及配置</h3><p>下面介绍一下如何配置Next主题的配置文件。配置分为两部分，一部分需要配置博客根目录下的_config.yml文件，修改主配置。主题相关的配置需要修改主题文件夹下的_config.yml文件。</p>
<h4 id="主配置文件修改"><a href="#主配置文件修改" class="headerlink" title="主配置文件修改"></a>主配置文件修改</h4><p>下段代码是配置我们hexo博客主要信息的配置代码，需要修改为我们自己的信息。包括titie、description、author等。其中language要修改为中文。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="section">title: 金年轻</span></span><br><span class="line"><span class="section">subtitle: ''</span></span><br><span class="line"><span class="section">description: '金年轻的个人博客，欢迎交流'</span></span><br><span class="line"><span class="section">keywords:</span></span><br><span class="line"><span class="section">author: 金年轻</span></span><br><span class="line"><span class="section">language: zh-CN</span></span><br><span class="line"><span class="section">timezone: ''</span></span><br></pre></td></tr></table></figure>

<h4 id="主题配置文件修改"><a href="#主题配置文件修改" class="headerlink" title="主题配置文件修改"></a>主题配置文件修改</h4><p>首先打开上面下载或者克隆好的Next主题目录，即在hexo/themes下面，然后打开其_config.xml主题配置文件。我们一一修改。</p>
<p>由于配置文件是yml，如果对yml语法不太熟的小伙伴，注意每个配置之间都必须有空格，不然报错。注意:后面有一个空格，所有yml语法都是这样。</p>
<h5 id="菜单栏设置"><a href="#菜单栏设置" class="headerlink" title="菜单栏设置"></a>菜单栏设置</h5><p>搜索menu，找到如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable/Disable menu icons.</span></span><br><span class="line"><span class="attr">menu_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment">#表示是否显示菜单图标icons</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span>  <span class="comment"># 显示每个菜单下面有多少个内容</span></span><br></pre></td></tr></table></figure>
<p>我们一般要开启home、tags、categories、archives这几个基本菜单栏标签。<br>其中后面||后面表示的fontawesome中的图标名称，如果想要修改图标，可以去FontAwesome官网找自己喜欢的图标样式。</p>
<h5 id="Next主题风格设置"><a href="#Next主题风格设置" class="headerlink" title="Next主题风格设置"></a>Next主题风格设置</h5><p>在站点的配置文件中，搜索hightlight:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure>
<p>文字自动检测默认不启动，所以改成true使其起作用。</p>
<p>next有四种主题风格。搜索schema，找到如下代码。可以根据喜好切换。要注意依赖<a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">https://github.com/chriskempson/tomorrow-theme</a> ，所以要clone项目到lib目录下。</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Schemes</span></span><br><span class="line">scheme: Muse</span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line"><span class="meta">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<h5 id="社交链接设置"><a href="#社交链接设置" class="headerlink" title="社交链接设置"></a>社交链接设置</h5><p>搜索social，找到如下代码：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#socia<span class="variable">l:</span></span><br><span class="line">  #GitHu<span class="variable">b:</span> http<span class="variable">s:</span>//github.<span class="keyword">com</span>/yourname || github</span><br><span class="line">  #E-Mai<span class="variable">l:</span> mailto:yourname@gmail.<span class="keyword">com</span> || envelope</span><br><span class="line">  #Google: http<span class="variable">s:</span>//plus.google.<span class="keyword">com</span>/yourname || google</span><br><span class="line">  #Twitter: http<span class="variable">s:</span>//twitter.<span class="keyword">com</span>/yourname || twitter</span><br><span class="line">  #FB Page: http<span class="variable">s:</span>//www.facebook.<span class="keyword">com</span>/yourname || facebook</span><br><span class="line">  #VK Group: http<span class="variable">s:</span>//vk.<span class="keyword">com</span>/yourname || vk</span><br><span class="line">  #StackOverflo<span class="variable">w:</span> http<span class="variable">s:</span>//stackoverflow.<span class="keyword">com</span>/yourname || stack-overflow</span><br><span class="line">  #YouTube: http<span class="variable">s:</span>//youtube.<span class="keyword">com</span>/yourname || youtube</span><br><span class="line">  #Instagram: http<span class="variable">s:</span>//instagram.<span class="keyword">com</span>/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?<span class="keyword">call</span>|chat || skype</span><br></pre></td></tr></table></figure>
<h5 id="友情链接设置"><a href="#友情链接设置" class="headerlink" title="友情链接设置"></a>友情链接设置</h5><p>搜索links，找到如下配置。添加友情链接即可。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Blog rolls</span></span><br><span class="line"><span class="symbol">links_icon:</span> link</span><br><span class="line"><span class="symbol">links_title:</span> Links</span><br><span class="line"><span class="symbol">links_layout:</span> block</span><br><span class="line"><span class="meta">#links_layout: inline</span></span><br><span class="line"><span class="meta">#links:</span></span><br><span class="line">  <span class="meta">#Title: http:<span class="comment">//example.com/</span></span></span><br></pre></td></tr></table></figure>
<h5 id="文章字数统计设置"><a href="#文章字数统计设置" class="headerlink" title="文章字数统计设置"></a>文章字数统计设置</h5><p>搜索post_wordcount，找到如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure>
<p>注意开启上述设置必须要添加hexo-symbols-count-time模块依赖，即在hexo站点根目录下使用npm install hexo-symbols-count-time –save命令安装模块。</p>
<h5 id="侧边栏头像设置"><a href="#侧边栏头像设置" class="headerlink" title="侧边栏头像设置"></a>侧边栏头像设置</h5><p>搜索avatar，找到如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># in theme directory(source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># in site  directory(source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span>  <span class="comment"># 此处是头像的地址</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle. </span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>   <span class="comment"># 设置头像是否为圆形</span></span><br><span class="line">  <span class="comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span>    <span class="comment"># 设置不透明度，1为完全不透明，0为完全透明</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span>   <span class="comment"># 设置鼠标放到头像上是否旋转</span></span><br></pre></td></tr></table></figure>
<p>其中我们需要配置url，此处是我们头像的地址。rounded可以设置头像是否为圆形，rotated可以设置鼠标放到头像上是否旋转。</p>
<h5 id="代码块风格设置"><a href="#代码块风格设置" class="headerlink" title="代码块风格设置"></a>代码块风格设置</h5><p>搜索highlight_theme，有以下多种风格：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Code Highlight theme</span></span><br><span class="line"><span class="meta"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line"><span class="meta"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">highlight_theme: night eighties</span><br></pre></td></tr></table></figure>
<h5 id="添加valine评论系统"><a href="#添加valine评论系统" class="headerlink" title="添加valine评论系统"></a>添加valine评论系统</h5><p>搜索valine，找到如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine.</span></span><br><span class="line"><span class="comment"># You can get your appid and appkey from https://leancloud.cn</span></span><br><span class="line"><span class="comment"># more info please open https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>   <span class="comment"># your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span>  <span class="comment"># your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">留下邮箱，有回复时你将收到提醒，邮箱不会被公开。</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">wavatar</span> <span class="comment"># gravatar style https://valine.js.org/avatar/</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># custom comment header default: nick,mail,link</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br></pre></td></tr></table></figure>
<p>注意由于valine是第三方插件，因此要先去<a href="https://leancloud.cn" target="_blank" rel="noopener">https://leancloud.cn</a> 网站注册，获取到appid和appkey后放到这里就ok了。其中avatar是设置默认头像，可以去<a href="https://valine.js.org/avatar" target="_blank" rel="noopener">https://valine.js.org/avatar</a> 选择默认头像，然后在这里设置名字即可。<br>配置中遇到头像与用户名不显示的问题。经过排查发现，用户名需要手动输入才会显示。抓包发现评论发送时request请求头中字段中nick字段为用户名，在leancloud账户中创建的class中的comment中存储我们的评论数据。调试发现必须建立comment及counter类才能正常使用我们的评论系统，以为valine是依托leancloud实现的。在评论时输入邮箱，头像显示。</p>
<h5 id="开启不蒜子统计功能"><a href="#开启不蒜子统计功能" class="headerlink" title="开启不蒜子统计功能"></a>开启不蒜子统计功能</h5><p>搜索busuanzi_count，可以配置如下，也可以使用默认设置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views/Visitors of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span> <span class="comment">#total visitors</span></span><br><span class="line">  <span class="attr">site_uv_icon:</span>  <span class="comment">#user-circle</span></span><br><span class="line">  <span class="attr">site_uv_header:</span> <span class="string">你是来访的第</span></span><br><span class="line">  <span class="attr">site_uv_footer:</span> <span class="string">位小伙伴</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">false</span> <span class="comment">#total views</span></span><br><span class="line">  <span class="attr">site_pv_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">site_pv_header:</span> <span class="string">访问次数：</span></span><br><span class="line">  <span class="attr">site_pv_footer:</span> <span class="string">次</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure>
<h5 id="开启本地博客搜索功能"><a href="#开启本地博客搜索功能" class="headerlink" title="开启本地博客搜索功能"></a>开启本地博客搜索功能</h5><p>搜索local_search，设置代码如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># unescape html strings to the readable one</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>注意该搜索功能需要依赖hexo-generator-searchdb插件，依然还是使用命令npm install hexo-generator-searchdb –save来进行安装。然后 在hexo站点根目录的末尾，加入以下代码即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<h5 id="开启背景动画"><a href="#开启背景动画" class="headerlink" title="开启背景动画"></a>开启背景动画</h5><h2 id="Valine评论系统配置"><a href="#Valine评论系统配置" class="headerlink" title="Valine评论系统配置"></a>Valine评论系统配置</h2><p>NexT v6.0+中，背景动画Canvas_nest无效。找到three标签，配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="attr">three:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>配置完成后运行发现并没有背景动画。我们发现该配置有依赖项，我们在next目录下的source/lib文件夹下clone该项目：<a href="https://github.com/theme-next/theme-next-three" target="_blank" rel="noopener">https://github.com/theme-next/theme-next-three</a> 。再次运行可以加载背景动画。</p>
<h2 id="设置hexo首页文章只显示部分摘要"><a href="#设置hexo首页文章只显示部分摘要" class="headerlink" title="设置hexo首页文章只显示部分摘要"></a>设置hexo首页文章只显示部分摘要</h2><p>修改配置</p>
<p>首先需要在Next主题的_config.yml中把设置打开：(默认安装时就打开了)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p><strong>方法一：写概述</strong></p>
<p>在文章的front-matter中添加description，其中description中的内容就会被显示在首页上，其余一律不显示。</p>
<p><strong>方法二：文章截断</strong></p>
<p>在需要截断的地方加入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>至此在一波熬夜后，基本完成了基于next的博客搭建，并部署在了github上。目前只实现了基本的功能需求，鉴于访问速度还是很慢，所以后续我会继续优化，会尽快把博客部署到服务器上。<br>下面放上我的博客地址：<a href="https://buaajz.github.io">https://buaajz.github.io</a>。欢迎大家进来交流，共同学习。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><blockquote>
<p>markdown语法：<a href="https://www.jianshu.com/p/191d1e21f7ed/" target="_blank" rel="noopener">https://www.jianshu.com/p/191d1e21f7ed/</a><br><a href="https://www.jianshu.com/p/2e318226c88d" target="_blank" rel="noopener">https://www.jianshu.com/p/2e318226c88d</a></p>
</blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
